harvester {
    # trust_domain: Specifies the trust domain of the SPIRE Server instance that the Harvester runs alongside.
    # It should be set to the same trust domain as the SPIRE Server being managed by the Harvester.
    trust_domain = "example.org"

    # harvester_socket_path: Specifies the path to the UNIX Domain Socket that the Galadriel Harvester will listen on.
    # Default: /tmp/galadriel-harvester/api.sock
    harvester_socket_path = "/tmp/galadriel-harvester/api.sock"

    # spire_socket_path: Specifies the path to the UNIX Domain Socket of the SPIRE Server that the Harvester will connect to.
    # Default: /tmp/spire-server/private/api.sock
    spire_socket_path = "/tmp/spire-server/private/api.sock"

    # galadriel_server_address: Specifies the DNS name or IP address and port of the upstream Galadriel Server that the Harvester will connect to.
    # Examples: localhost:8085, my-upstream-server.com:4556, 192.168.1.125:4000
    galadriel_server_address = "localhost:8085"

    # server_trust_bundle_path: Path to the Galadriel Server CA bundle.
    server_trust_bundle_path = "./conf/harvester/dummy_root_ca.crt"

    # federated_bundles_poll_interval: configure how often the harvester will poll federated bundles
    # from the Galadriel Server.
    # Default: 2m
    federated_bundles_poll_interval = "10s"

    # spire_bundle_poll_interval: configure how often the harvester will poll the bundle from SPIRE.
    # Default: 1m
    spire_bundle_poll_interval = "10s"

    # log_level: Sets the logging level [DEBUG|INFO|WARN|ERROR]. Default: INFO.
    log_level = "DEBUG"

    # data_dir: Directory to store persistent data.
    data_dir = "./.data"
}

providers {
    # BundleSigner enables the signing of bundles using a selected implementation.
    # It's required and only one BundleSigner can be configured at a time.
    # To opt-out from bundle signing, use the "noop" implementation.

    # No-op signing (doesn't sign bundles)
    # BundleSigner "noop" {}

    # Enables the signing of bundles using a disk-based key pair.
    BundleSigner "disk" {
        # ca_private_key_path: Path to the CA key file. Key files must
        # contain a single PEM encoded key. The supported key types are EC
        # (ASN.1 or PKCS8 encoded) or RSA (PKCS1 or PKCS8 encoded).
        ca_private_key_path = "conf/harvester/dummy_root_ca.key"

        # ca_cert_path: If the BundleSigner will use a self-signed CA, cert_file_path
        # should specify the path to a single PEM encoded certificate
        # representing the CA certificate. If not self-signed,
        # ca_cert_path should specify the path to a file that must contain
        # one or more certificates necessary to establish a valid certificate
        # chain up the root certificates defined in bundle_file_path.
        ca_cert_path = "conf/harvester/dummy_root_ca.crt"

        # trust_bundle_path: If Galadriel is using a self-signed CA, bundle_file_path
        # can be left unset. If not self-signed, then trust_bundle_path should
        # be the path to a file that must contain one or more certificates
        # representing the upstream root certificates and the file at
        # ca_cert_path contains one or more certificates necessary to chain up
        # the root certificates in bundle_file_path (where the first
        # certificate in ca_cert_path is the CA certificate).
        trust_bundle_path = ""
    }

    # BundleVerifier enables the verification of bundle signatures using selected implementations.
    # Multiple BundleVerifier blocks can be configured to support different verification methods.
    # If one of the verifiers can successfully verify the received bundle signature, the bundle is considered valid.

    # If this verifier is enabled, all bundles will pass the verification process
    # without actually validating the signatures.
    # This verifier should be used with caution as it bypasses the signature validation.
    # BundleVerifier "noop" {}

    # Enables the verification of bundle signatures using a disk-based trust bundle.
    BundleVerifier "disk" {
        trust_bundle_path = "conf/harvester/dummy_root_ca.crt"
    }
}
