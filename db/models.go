// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

type Status string

const (
	StatusPending  Status = "pending"
	StatusActive   Status = "active"
	StatusDisabled Status = "disabled"
	StatusDenied   Status = "denied"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status
	Valid  bool // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Status, nil
}

type Bundle struct {
	ID           pgtype.UUID
	RawBundle    []byte
	Digest       []byte
	SignedBundle []byte
	TlogID       uuid.NullUUID
	SvidPem      sql.NullString
	MemberID     pgtype.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

type FederationGroup struct {
	ID          pgtype.UUID
	Name        string
	Description sql.NullString
	Status      Status
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type Harvester struct {
	ID          pgtype.UUID
	MemberID    pgtype.UUID
	IsLeader    sql.NullBool
	LeaderUntil time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type JoinToken struct {
	ID        pgtype.UUID
	Token     string
	Used      sql.NullBool
	Expiry    time.Time
	MemberID  pgtype.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Member struct {
	ID          pgtype.UUID
	TrustDomain string
	Status      Status
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type Membership struct {
	ID                pgtype.UUID
	MemberID          pgtype.UUID
	FederationGroupID pgtype.UUID
	Status            Status
	CreatedAt         time.Time
	UpdatedAt         time.Time
}
