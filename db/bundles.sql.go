// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: bundles.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createBundle = `-- name: CreateBundle :one
INSERT INTO bundles(raw_bundle, digest, signed_bundle, tlog_id, svid_pem, member_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, raw_bundle, digest, signed_bundle, tlog_id, svid_pem, member_id, created_at, updated_at
`

type CreateBundleParams struct {
	RawBundle    []byte
	Digest       []byte
	SignedBundle []byte
	TlogID       uuid.NullUUID
	SvidPem      sql.NullString
	MemberID     pgtype.UUID
}

func (q *Queries) CreateBundle(ctx context.Context, arg CreateBundleParams) (Bundle, error) {
	row := q.queryRow(ctx, q.createBundleStmt, createBundle,
		arg.RawBundle,
		arg.Digest,
		arg.SignedBundle,
		arg.TlogID,
		arg.SvidPem,
		arg.MemberID,
	)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.RawBundle,
		&i.Digest,
		&i.SignedBundle,
		&i.TlogID,
		&i.SvidPem,
		&i.MemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBundle = `-- name: DeleteBundle :exec
DELETE
FROM bundles
WHERE id = $1
`

func (q *Queries) DeleteBundle(ctx context.Context, id pgtype.UUID) error {
	_, err := q.exec(ctx, q.deleteBundleStmt, deleteBundle, id)
	return err
}

const findBundleByID = `-- name: FindBundleByID :one
SELECT id, raw_bundle, digest, signed_bundle, tlog_id, svid_pem, member_id, created_at, updated_at
FROM bundles
WHERE id = $1
`

func (q *Queries) FindBundleByID(ctx context.Context, id pgtype.UUID) (Bundle, error) {
	row := q.queryRow(ctx, q.findBundleByIDStmt, findBundleByID, id)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.RawBundle,
		&i.Digest,
		&i.SignedBundle,
		&i.TlogID,
		&i.SvidPem,
		&i.MemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findBundleByMemberID = `-- name: FindBundleByMemberID :one
SELECT id, raw_bundle, digest, signed_bundle, tlog_id, svid_pem, member_id, created_at, updated_at
FROM bundles
WHERE member_id = $1
`

func (q *Queries) FindBundleByMemberID(ctx context.Context, memberID pgtype.UUID) (Bundle, error) {
	row := q.queryRow(ctx, q.findBundleByMemberIDStmt, findBundleByMemberID, memberID)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.RawBundle,
		&i.Digest,
		&i.SignedBundle,
		&i.TlogID,
		&i.SvidPem,
		&i.MemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBundles = `-- name: ListBundles :many
SELECT id, raw_bundle, digest, signed_bundle, tlog_id, svid_pem, member_id, created_at, updated_at
FROM bundles
ORDER BY created_at DESC
`

func (q *Queries) ListBundles(ctx context.Context) ([]Bundle, error) {
	rows, err := q.query(ctx, q.listBundlesStmt, listBundles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bundle
	for rows.Next() {
		var i Bundle
		if err := rows.Scan(
			&i.ID,
			&i.RawBundle,
			&i.Digest,
			&i.SignedBundle,
			&i.TlogID,
			&i.SvidPem,
			&i.MemberID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBundle = `-- name: UpdateBundle :one
UPDATE bundles
SET raw_bundle    = $2,
    digest        = $3,
    signed_bundle = $4,
    tlog_id       = $5,
    svid_pem      = $6,
    updated_at    = now()
WHERE id = $1
RETURNING id, raw_bundle, digest, signed_bundle, tlog_id, svid_pem, member_id, created_at, updated_at
`

type UpdateBundleParams struct {
	ID           pgtype.UUID
	RawBundle    []byte
	Digest       []byte
	SignedBundle []byte
	TlogID       uuid.NullUUID
	SvidPem      sql.NullString
}

func (q *Queries) UpdateBundle(ctx context.Context, arg UpdateBundleParams) (Bundle, error) {
	row := q.queryRow(ctx, q.updateBundleStmt, updateBundle,
		arg.ID,
		arg.RawBundle,
		arg.Digest,
		arg.SignedBundle,
		arg.TlogID,
		arg.SvidPem,
	)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.RawBundle,
		&i.Digest,
		&i.SignedBundle,
		&i.TlogID,
		&i.SvidPem,
		&i.MemberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
