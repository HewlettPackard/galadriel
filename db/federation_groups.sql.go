// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: federation_groups.sql

package db

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const createFederationGroup = `-- name: CreateFederationGroup :one
INSERT INTO federation_groups(name, description, status)
VALUES ($1, $2, $3)
RETURNING id, name, description, status, created_at, updated_at
`

type CreateFederationGroupParams struct {
	Name        string
	Description sql.NullString
	Status      Status
}

func (q *Queries) CreateFederationGroup(ctx context.Context, arg CreateFederationGroupParams) (FederationGroup, error) {
	row := q.queryRow(ctx, q.createFederationGroupStmt, createFederationGroup, arg.Name, arg.Description, arg.Status)
	var i FederationGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFederationGroup = `-- name: DeleteFederationGroup :exec
DELETE
FROM federation_groups
WHERE id = $1
`

func (q *Queries) DeleteFederationGroup(ctx context.Context, id pgtype.UUID) error {
	_, err := q.exec(ctx, q.deleteFederationGroupStmt, deleteFederationGroup, id)
	return err
}

const findFederationGroupByID = `-- name: FindFederationGroupByID :one
SELECT id, name, description, status, created_at, updated_at
FROM federation_groups
WHERE id = $1
`

func (q *Queries) FindFederationGroupByID(ctx context.Context, id pgtype.UUID) (FederationGroup, error) {
	row := q.queryRow(ctx, q.findFederationGroupByIDStmt, findFederationGroupByID, id)
	var i FederationGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFederationGroups = `-- name: ListFederationGroups :many
SELECT id, name, description, status, created_at, updated_at
FROM federation_groups
ORDER BY created_at DESC
`

func (q *Queries) ListFederationGroups(ctx context.Context) ([]FederationGroup, error) {
	rows, err := q.query(ctx, q.listFederationGroupsStmt, listFederationGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FederationGroup
	for rows.Next() {
		var i FederationGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFederationGroup = `-- name: UpdateFederationGroup :one
UPDATE federation_groups
SET name        = $2,
    description = $3,
    status       = $4
WHERE id = $1
RETURNING id, name, description, status, created_at, updated_at
`

type UpdateFederationGroupParams struct {
	ID          pgtype.UUID
	Name        string
	Description sql.NullString
	Status      Status
}

func (q *Queries) UpdateFederationGroup(ctx context.Context, arg UpdateFederationGroupParams) (FederationGroup, error) {
	row := q.queryRow(ctx, q.updateFederationGroupStmt, updateFederationGroup,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Status,
	)
	var i FederationGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
