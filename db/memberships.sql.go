// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: memberships.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO memberships(member_id, federation_group_id, status)
VALUES ($1, $2, $3)
RETURNING id, member_id, federation_group_id, status, created_at, updated_at
`

type CreateMembershipParams struct {
	MemberID          pgtype.UUID
	FederationGroupID pgtype.UUID
	Status            Status
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.queryRow(ctx, q.createMembershipStmt, createMembership, arg.MemberID, arg.FederationGroupID, arg.Status)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.FederationGroupID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMembership = `-- name: DeleteMembership :exec
DELETE
FROM memberships
WHERE id = $1
`

func (q *Queries) DeleteMembership(ctx context.Context, id pgtype.UUID) error {
	_, err := q.exec(ctx, q.deleteMembershipStmt, deleteMembership, id)
	return err
}

const findMembershipByID = `-- name: FindMembershipByID :one
SELECT id, member_id, federation_group_id, status, created_at, updated_at
FROM memberships
WHERE id = $1
`

func (q *Queries) FindMembershipByID(ctx context.Context, id pgtype.UUID) (Membership, error) {
	row := q.queryRow(ctx, q.findMembershipByIDStmt, findMembershipByID, id)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.FederationGroupID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findMembershipsByMemberID = `-- name: FindMembershipsByMemberID :many
SELECT id, member_id, federation_group_id, status, created_at, updated_at
FROM memberships
WHERE member_id = $1
`

func (q *Queries) FindMembershipsByMemberID(ctx context.Context, memberID pgtype.UUID) ([]Membership, error) {
	rows, err := q.query(ctx, q.findMembershipsByMemberIDStmt, findMembershipsByMemberID, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.FederationGroupID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMemberships = `-- name: ListMemberships :many
SELECT id, member_id, federation_group_id, status, created_at, updated_at
FROM memberships
ORDER BY created_at DESC
`

func (q *Queries) ListMemberships(ctx context.Context) ([]Membership, error) {
	rows, err := q.query(ctx, q.listMembershipsStmt, listMemberships)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.FederationGroupID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembership = `-- name: UpdateMembership :one
UPDATE memberships
SET status     = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, member_id, federation_group_id, status, created_at, updated_at
`

type UpdateMembershipParams struct {
	ID     pgtype.UUID
	Status Status
}

func (q *Queries) UpdateMembership(ctx context.Context, arg UpdateMembershipParams) (Membership, error) {
	row := q.queryRow(ctx, q.updateMembershipStmt, updateMembership, arg.ID, arg.Status)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.FederationGroupID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
