// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest defines model for BundleDigest.
type BundleDigest = string

// Certificate X.509 certificate in PEM format
type Certificate = string

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time `json:"created_at"`
	Id                  UUID      `json:"id"`
	TrustDomainAConsent bool      `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID      `json:"trust_domain_a_id"`
	TrustDomainBConsent bool      `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID      `json:"trust_domain_b_id"`
	UpdatedAt           time.Time `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature defines model for Signature.
type Signature = string

// TrustBundle X.509 certificate in PEM format
type TrustBundle = Certificate

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId *SPIFFEID       `json:"harvester_spiffe_id,omitempty"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle X.509 certificate in PEM format
	OnboardingBundle *TrustBundle `json:"onboarding_bundle,omitempty"`
	UpdatedAt        time.Time    `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
