// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ConsentStatus.
const (
	Approved ConsentStatus = "approved"
	Denied   ConsentStatus = "denied"
	Pending  ConsentStatus = "pending"
)

// Defines values for CreatedAtOrder.
const (
	Asc  CreatedAtOrder = "asc"
	Desc CreatedAtOrder = "desc"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest base64 encoded SHA-256 digest of the bundle
type BundleDigest = string

// Certificate X.509 certificate in PEM format
type Certificate = string

// ConsentStatus defines model for ConsentStatus.
type ConsentStatus string

// CreatedAtOrder Defines the order of element based on creation time
type CreatedAtOrder string

// Date defines model for Date.
type Date = openapi_types.Date

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// PageNumber The number of items to skip before starting to collect the result set. O means no pagination
type PageNumber = int

// PageSize The numbers of items to return. O means no pagination
type PageSize = int

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time        `json:"created_at"`
	Id                  UUID             `json:"id"`
	TrustDomainAConsent ConsentStatus    `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID             `json:"trust_domain_a_id"`
	TrustDomainAName    *TrustDomainName `json:"trust_domain_a_name,omitempty"`
	TrustDomainBConsent ConsentStatus    `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID             `json:"trust_domain_b_id"`
	TrustDomainBName    *TrustDomainName `json:"trust_domain_b_name,omitempty"`
	UpdatedAt           time.Time        `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature base64 encoded signature of the bundle
type Signature = string

// TrustBundle SPIFFE Trust bundle in JSON format
type TrustBundle = string

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId *SPIFFEID       `json:"harvester_spiffe_id,omitempty"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle SPIFFE Trust bundle in JSON format
	OnboardingBundle *TrustBundle `json:"onboarding_bundle,omitempty"`
	UpdatedAt        time.Time    `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
