// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest defines model for BundleDigest.
type BundleDigest = []byte

// Certificate Base-64 encoded Trust Bundle in PEM format
type Certificate = []byte

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time `json:"created_at"`
	Id                  UUID      `json:"id"`
	TrustDomainAConsent bool      `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID      `json:"trust_domain_a_id"`
	TrustDomainBConsent bool      `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID      `json:"trust_domain_b_id"`
	UpdatedAt           time.Time `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature defines model for Signature.
type Signature = []byte

// TrustBundle Base-64 encoded Trust Bundle in PEM format
type TrustBundle = Certificate

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId SPIFFEID        `json:"harvester_spiffe_id"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle Base-64 encoded Trust Bundle in PEM format
	OnboardingBundle TrustBundle `json:"onboarding_bundle"`
	UpdatedAt        time.Time   `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
