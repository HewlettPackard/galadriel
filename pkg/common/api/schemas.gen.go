// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ConsentStatus.
const (
	Approved ConsentStatus = "approved"
	Denied   ConsentStatus = "denied"
	Pending  ConsentStatus = "pending"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest base64 encoded SHA-256 digest of the bundle
type BundleDigest = string

// CertificateChain X.509 certificate chain in PEM format
type CertificateChain = string

// ConsentStatus defines model for ConsentStatus.
type ConsentStatus string

// Date defines model for Date.
type Date = openapi_types.Date

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// PageNumber The number of items to skip before starting to collect the result set.
type PageNumber = int

// PageSize The numbers of items to return.
type PageSize = int

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time        `json:"created_at"`
	Id                  UUID             `json:"id"`
	TrustDomainAConsent ConsentStatus    `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID             `json:"trust_domain_a_id"`
	TrustDomainAName    *TrustDomainName `json:"trust_domain_a_name,omitempty"`
	TrustDomainBConsent ConsentStatus    `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID             `json:"trust_domain_b_id"`
	TrustDomainBName    *TrustDomainName `json:"trust_domain_b_name,omitempty"`
	UpdatedAt           time.Time        `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature base64 encoded signature of the bundle
type Signature = string

// TrustBundle SPIFFE Trust bundle in JSON format
type TrustBundle = string

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId *SPIFFEID       `json:"harvester_spiffe_id,omitempty"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle SPIFFE Trust bundle in JSON format
	OnboardingBundle *TrustBundle `json:"onboarding_bundle,omitempty"`
	UpdatedAt        time.Time    `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
