// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ConsentStatus.
const (
	Accepted ConsentStatus = "accepted"
	Denied   ConsentStatus = "denied"
	Pending  ConsentStatus = "pending"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest defines model for BundleDigest.
type BundleDigest = string

// Certificate X.509 certificate in PEM format
type Certificate = string

// ConsentStatus defines model for ConsentStatus.
type ConsentStatus string

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time     `json:"created_at"`
	Id                  UUID          `json:"id"`
	TrustDomainAConsent ConsentStatus `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID          `json:"trust_domain_a_id"`
	TrustDomainBConsent ConsentStatus `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID          `json:"trust_domain_b_id"`
	UpdatedAt           time.Time     `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature defines model for Signature.
type Signature = string

// TrustBundle X.509 certificate in PEM format
type TrustBundle = Certificate

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId *SPIFFEID       `json:"harvester_spiffe_id,omitempty"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle X.509 certificate in PEM format
	OnboardingBundle *TrustBundle `json:"onboarding_bundle,omitempty"`
	UpdatedAt        time.Time    `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"InHMWF8jAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
