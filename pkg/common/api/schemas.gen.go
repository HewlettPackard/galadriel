// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ConsentStatus.
const (
	Accepted ConsentStatus = "accepted"
	Denied   ConsentStatus = "denied"
	Pending  ConsentStatus = "pending"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest base64 encoded SHA-256 digest of the bundle
type BundleDigest = string

// Certificate X.509 certificate in PEM format
type Certificate = string

// ConsentStatus defines model for ConsentStatus.
type ConsentStatus string

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time        `json:"created_at"`
	Id                  UUID             `json:"id"`
	TrustDomainAConsent ConsentStatus    `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID             `json:"trust_domain_a_id"`
	TrustDomainAName    *TrustDomainName `json:"trust_domain_a_name,omitempty"`
	TrustDomainBConsent ConsentStatus    `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID             `json:"trust_domain_b_id"`
	TrustDomainBName    *TrustDomainName `json:"trust_domain_b_name,omitempty"`
	UpdatedAt           time.Time        `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature base64 encoded signature of the bundle
type Signature = string

// TrustBundle SPIFFE Trust bundle in JSON format
type TrustBundle = string

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId *SPIFFEID       `json:"harvester_spiffe_id,omitempty"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle SPIFFE Trust bundle in JSON format
	OnboardingBundle *TrustBundle `json:"onboarding_bundle,omitempty"`
	UpdatedAt        time.Time    `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"EDkbAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
