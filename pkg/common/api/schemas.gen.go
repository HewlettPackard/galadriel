// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ConsentStatus.
const (
	Approved ConsentStatus = "approved"
	Denied   ConsentStatus = "denied"
	Pending  ConsentStatus = "pending"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest base64 encoded SHA-256 digest of the bundle
type BundleDigest = string

// Certificate X.509 certificate in PEM format
type Certificate = string

// ConsentStatus defines model for ConsentStatus.
type ConsentStatus string

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// Limit The numbers of items to return.
type Limit = int

// Offset The number of items to skip before starting to collect the result set.
type Offset = int

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time        `json:"created_at"`
	Id                  UUID             `json:"id"`
	TrustDomainAConsent ConsentStatus    `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID             `json:"trust_domain_a_id"`
	TrustDomainAName    *TrustDomainName `json:"trust_domain_a_name,omitempty"`
	TrustDomainBConsent ConsentStatus    `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID             `json:"trust_domain_b_id"`
	TrustDomainBName    *TrustDomainName `json:"trust_domain_b_name,omitempty"`
	UpdatedAt           time.Time        `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature base64 encoded signature of the bundle
type Signature = string

// TrustBundle SPIFFE Trust bundle in JSON format
type TrustBundle = string

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId *SPIFFEID       `json:"harvester_spiffe_id,omitempty"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle SPIFFE Trust bundle in JSON format
	OnboardingBundle *TrustBundle `json:"onboarding_bundle,omitempty"`
	UpdatedAt        time.Time    `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
