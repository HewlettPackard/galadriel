// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ConsentStatus.
const (
	Accepted ConsentStatus = "accepted"
	Denied   ConsentStatus = "denied"
	Pending  ConsentStatus = "pending"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest base64 encoded SHA-256 digest of the bundle
type BundleDigest = string

// Certificate X.509 certificate in PEM format
type Certificate = string

// ConsentStatus defines model for ConsentStatus.
type ConsentStatus string

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time        `json:"created_at"`
	Id                  UUID             `json:"id"`
	TrustDomainAConsent ConsentStatus    `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID             `json:"trust_domain_a_id"`
	TrustDomainAName    *TrustDomainName `json:"trust_domain_a_name,omitempty"`
	TrustDomainBConsent ConsentStatus    `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID             `json:"trust_domain_b_id"`
	TrustDomainBName    *TrustDomainName `json:"trust_domain_b_name,omitempty"`
	UpdatedAt           time.Time        `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature base64 encoded signature of the bundle
type Signature = string

// TrustBundle X.509 certificate in PEM format
type TrustBundle = Certificate

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId *SPIFFEID       `json:"harvester_spiffe_id,omitempty"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle X.509 certificate in PEM format
	OnboardingBundle *TrustBundle `json:"onboarding_bundle,omitempty"`
	UpdatedAt        time.Time    `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
