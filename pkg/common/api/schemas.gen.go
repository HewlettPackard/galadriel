// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest defines model for BundleDigest.
type BundleDigest = string

// Certificate X.509 certificate in PEM format
type Certificate = string

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time `json:"created_at"`
	Id                  UUID      `json:"id"`
	TrustDomainAConsent bool      `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID      `json:"trust_domain_a_id"`
	TrustDomainBConsent bool      `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID      `json:"trust_domain_b_id"`
	UpdatedAt           time.Time `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature defines model for Signature.
type Signature = string

// TrustBundle X.509 certificate in PEM format
type TrustBundle = Certificate

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId *SPIFFEID       `json:"harvester_spiffe_id,omitempty"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle X.509 certificate in PEM format
	OnboardingBundle *TrustBundle `json:"onboarding_bundle,omitempty"`
	UpdatedAt        time.Time    `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
