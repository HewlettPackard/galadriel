// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ConsentStatus.
const (
	Approved ConsentStatus = "approved"
	Denied   ConsentStatus = "denied"
	Pending  ConsentStatus = "pending"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest base64 encoded SHA-256 digest of the bundle
type BundleDigest = string

// Certificate X.509 certificate in PEM format
type Certificate = string

// ConsentStatus defines model for ConsentStatus.
type ConsentStatus string

// Date defines model for Date.
type Date = openapi_types.Date

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// Limit The numbers of items to return.
type Limit = int

// Offset The number of items to skip before starting to collect the result set.
type Offset = int

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time        `json:"created_at"`
	Id                  UUID             `json:"id"`
	TrustDomainAConsent ConsentStatus    `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID             `json:"trust_domain_a_id"`
	TrustDomainAName    *TrustDomainName `json:"trust_domain_a_name,omitempty"`
	TrustDomainBConsent ConsentStatus    `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID             `json:"trust_domain_b_id"`
	TrustDomainBName    *TrustDomainName `json:"trust_domain_b_name,omitempty"`
	UpdatedAt           time.Time        `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature base64 encoded signature of the bundle
type Signature = string

// TrustBundle SPIFFE Trust bundle in JSON format
type TrustBundle = string

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId *SPIFFEID       `json:"harvester_spiffe_id,omitempty"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle SPIFFE Trust bundle in JSON format
	OnboardingBundle *TrustBundle `json:"onboarding_bundle,omitempty"`
	UpdatedAt        time.Time    `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
