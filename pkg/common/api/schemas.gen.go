// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// ApiError defines model for ApiError.
type ApiError struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// BundleDigest defines model for BundleDigest.
type BundleDigest = []byte

// Certificate Base-64 encoded Trust Bundle in PEM format
type Certificate = string

// JWT defines model for JWT.
type JWT = string

// JoinToken defines model for JoinToken.
type JoinToken = UUID

// Relationship defines model for Relationship.
type Relationship struct {
	CreatedAt           time.Time `json:"created_at"`
	Id                  UUID      `json:"id"`
	TrustDomainAConsent bool      `json:"trust_domain_a_consent"`
	TrustDomainAId      UUID      `json:"trust_domain_a_id"`
	TrustDomainBConsent bool      `json:"trust_domain_b_consent"`
	TrustDomainBId      UUID      `json:"trust_domain_b_id"`
	UpdatedAt           time.Time `json:"updated_at"`
}

// SPIFFEID defines model for SPIFFEID.
type SPIFFEID = string

// Signature defines model for Signature.
type Signature = []byte

// TrustBundle Base-64 encoded Trust Bundle in PEM format
type TrustBundle = Certificate

// TrustDomain defines model for TrustDomain.
type TrustDomain struct {
	CreatedAt         time.Time       `json:"created_at"`
	Description       *string         `json:"description,omitempty"`
	HarvesterSpiffeId SPIFFEID        `json:"harvester_spiffe_id"`
	Id                UUID            `json:"id"`
	Name              TrustDomainName `json:"name"`

	// OnboardingBundle Base-64 encoded Trust Bundle in PEM format
	OnboardingBundle TrustBundle `json:"onboarding_bundle"`
	UpdatedAt        time.Time   `json:"updated_at"`
}

// TrustDomainName defines model for TrustDomainName.
type TrustDomainName = string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Zj7/ZwAAAP//jBjMwqUjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
