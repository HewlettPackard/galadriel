// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package admin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// JoinTokenResult defines model for JoinTokenResult.
type JoinTokenResult struct {
	Token externalRef0.JoinToken `json:"token"`
}

// RelationshipRequest defines model for RelationshipRequest.
type RelationshipRequest struct {
	TrustDomainAId externalRef0.UUID `json:"trust_domain_a_id"`
	TrustDomainBId externalRef0.UUID `json:"trust_domain_b_id"`
}

// TrustDomainPut defines model for TrustDomainPut.
type TrustDomainPut struct {
	Description       *string                      `json:"description,omitempty"`
	HarvesterSpiffeId externalRef0.SPIFFEID        `json:"harvester_spiffe_id"`
	Name              externalRef0.TrustDomainName `json:"name"`

	// OnboardingBundle Base-64 encoded Trust Bundle in PEM format
	OnboardingBundle *externalRef0.TrustBundle `json:"onboarding_bundle,omitempty"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	// Status relationship status from a Trust Domain perspective
	Status *[]string `form:"status,omitempty" json:"status,omitempty"`
}

// PutRelationshipsJSONRequestBody defines body for PutRelationships for application/json ContentType.
type PutRelationshipsJSONRequestBody = RelationshipRequest

// PutTrustDomainJSONRequestBody defines body for PutTrustDomain for application/json ContentType.
type PutTrustDomainJSONRequestBody = TrustDomainPut

// PutTrustDomainTrustDomainNameJSONRequestBody defines body for PutTrustDomainTrustDomainName for application/json ContentType.
type PutTrustDomainTrustDomainNameJSONRequestBody = externalRef0.TrustDomain

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRelationships request with any body
	PutRelationshipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRelationships(ctx context.Context, body PutRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelationshipsRelationshipID request
	GetRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTrustDomain request with any body
	PutTrustDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTrustDomain(ctx context.Context, body PutTrustDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrustDomainTrustDomainName request
	GetTrustDomainTrustDomainName(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTrustDomainTrustDomainName request with any body
	PutTrustDomainTrustDomainNameWithBody(ctx context.Context, trustDomainName externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTrustDomainTrustDomainName(ctx context.Context, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrustDomainTrustDomainNameJoinToken request
	GetTrustDomainTrustDomainNameJoinToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRelationshipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRelationshipsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRelationships(ctx context.Context, body PutRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRelationshipsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRelationshipIDRequest(c.Server, relationshipID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrustDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrustDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrustDomain(ctx context.Context, body PutTrustDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrustDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrustDomainTrustDomainName(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrustDomainTrustDomainNameRequest(c.Server, trustDomainName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrustDomainTrustDomainNameWithBody(ctx context.Context, trustDomainName externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrustDomainTrustDomainNameRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrustDomainTrustDomainName(ctx context.Context, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrustDomainTrustDomainNameRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrustDomainTrustDomainNameJoinToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrustDomainTrustDomainNameJoinTokenRequest(c.Server, trustDomainName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRelationshipsRequest calls the generic PutRelationships builder with application/json body
func NewPutRelationshipsRequest(server string, body PutRelationshipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRelationshipsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutRelationshipsRequestWithBody generates requests for PutRelationships with any type of body
func NewPutRelationshipsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRelationshipsRelationshipIDRequest generates requests for GetRelationshipsRelationshipID
func NewGetRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTrustDomainRequest calls the generic PutTrustDomain builder with application/json body
func NewPutTrustDomainRequest(server string, body PutTrustDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTrustDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTrustDomainRequestWithBody generates requests for PutTrustDomain with any type of body
func NewPutTrustDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTrustDomainTrustDomainNameRequest generates requests for GetTrustDomainTrustDomainName
func NewGetTrustDomainTrustDomainNameRequest(server string, trustDomainName externalRef0.TrustDomainName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTrustDomainTrustDomainNameRequest calls the generic PutTrustDomainTrustDomainName builder with application/json body
func NewPutTrustDomainTrustDomainNameRequest(server string, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTrustDomainTrustDomainNameRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewPutTrustDomainTrustDomainNameRequestWithBody generates requests for PutTrustDomainTrustDomainName with any type of body
func NewPutTrustDomainTrustDomainNameRequestWithBody(server string, trustDomainName externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTrustDomainTrustDomainNameJoinTokenRequest generates requests for GetTrustDomainTrustDomainNameJoinToken
func NewGetTrustDomainTrustDomainNameJoinTokenRequest(server string, trustDomainName externalRef0.TrustDomainName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/join-token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PutRelationships request with any body
	PutRelationshipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRelationshipsResponse, error)

	PutRelationshipsWithResponse(ctx context.Context, body PutRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRelationshipsResponse, error)

	// GetRelationshipsRelationshipID request
	GetRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, reqEditors ...RequestEditorFn) (*GetRelationshipsRelationshipIDResponse, error)

	// PutTrustDomain request with any body
	PutTrustDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrustDomainResponse, error)

	PutTrustDomainWithResponse(ctx context.Context, body PutTrustDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrustDomainResponse, error)

	// GetTrustDomainTrustDomainName request
	GetTrustDomainTrustDomainNameWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetTrustDomainTrustDomainNameResponse, error)

	// PutTrustDomainTrustDomainName request with any body
	PutTrustDomainTrustDomainNameWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrustDomainTrustDomainNameResponse, error)

	PutTrustDomainTrustDomainNameWithResponse(ctx context.Context, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrustDomainTrustDomainNameResponse, error)

	// GetTrustDomainTrustDomainNameJoinToken request
	GetTrustDomainTrustDomainNameJoinTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetTrustDomainTrustDomainNameJoinTokenResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PutRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTrustDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *externalRef0.TrustDomain
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PutTrustDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTrustDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrustDomainTrustDomainNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.TrustDomain
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetTrustDomainTrustDomainNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrustDomainTrustDomainNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTrustDomainTrustDomainNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.TrustDomain
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PutTrustDomainTrustDomainNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTrustDomainTrustDomainNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrustDomainTrustDomainNameJoinTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JoinTokenResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetTrustDomainTrustDomainNameJoinTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrustDomainTrustDomainNameJoinTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PutRelationshipsWithBodyWithResponse request with arbitrary body returning *PutRelationshipsResponse
func (c *ClientWithResponses) PutRelationshipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRelationshipsResponse, error) {
	rsp, err := c.PutRelationshipsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRelationshipsResponse(rsp)
}

func (c *ClientWithResponses) PutRelationshipsWithResponse(ctx context.Context, body PutRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRelationshipsResponse, error) {
	rsp, err := c.PutRelationships(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRelationshipsResponse(rsp)
}

// GetRelationshipsRelationshipIDWithResponse request returning *GetRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) GetRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, reqEditors ...RequestEditorFn) (*GetRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.GetRelationshipsRelationshipID(ctx, relationshipID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsRelationshipIDResponse(rsp)
}

// PutTrustDomainWithBodyWithResponse request with arbitrary body returning *PutTrustDomainResponse
func (c *ClientWithResponses) PutTrustDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrustDomainResponse, error) {
	rsp, err := c.PutTrustDomainWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrustDomainResponse(rsp)
}

func (c *ClientWithResponses) PutTrustDomainWithResponse(ctx context.Context, body PutTrustDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrustDomainResponse, error) {
	rsp, err := c.PutTrustDomain(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrustDomainResponse(rsp)
}

// GetTrustDomainTrustDomainNameWithResponse request returning *GetTrustDomainTrustDomainNameResponse
func (c *ClientWithResponses) GetTrustDomainTrustDomainNameWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetTrustDomainTrustDomainNameResponse, error) {
	rsp, err := c.GetTrustDomainTrustDomainName(ctx, trustDomainName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrustDomainTrustDomainNameResponse(rsp)
}

// PutTrustDomainTrustDomainNameWithBodyWithResponse request with arbitrary body returning *PutTrustDomainTrustDomainNameResponse
func (c *ClientWithResponses) PutTrustDomainTrustDomainNameWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrustDomainTrustDomainNameResponse, error) {
	rsp, err := c.PutTrustDomainTrustDomainNameWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrustDomainTrustDomainNameResponse(rsp)
}

func (c *ClientWithResponses) PutTrustDomainTrustDomainNameWithResponse(ctx context.Context, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrustDomainTrustDomainNameResponse, error) {
	rsp, err := c.PutTrustDomainTrustDomainName(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrustDomainTrustDomainNameResponse(rsp)
}

// GetTrustDomainTrustDomainNameJoinTokenWithResponse request returning *GetTrustDomainTrustDomainNameJoinTokenResponse
func (c *ClientWithResponses) GetTrustDomainTrustDomainNameJoinTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetTrustDomainTrustDomainNameJoinTokenResponse, error) {
	rsp, err := c.GetTrustDomainTrustDomainNameJoinToken(ctx, trustDomainName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrustDomainTrustDomainNameJoinTokenResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutRelationshipsResponse parses an HTTP response from a PutRelationshipsWithResponse call
func ParsePutRelationshipsResponse(rsp *http.Response) (*PutRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRelationshipsRelationshipIDResponse parses an HTTP response from a GetRelationshipsRelationshipIDWithResponse call
func ParseGetRelationshipsRelationshipIDResponse(rsp *http.Response) (*GetRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutTrustDomainResponse parses an HTTP response from a PutTrustDomainWithResponse call
func ParsePutTrustDomainResponse(rsp *http.Response) (*PutTrustDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTrustDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.TrustDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTrustDomainTrustDomainNameResponse parses an HTTP response from a GetTrustDomainTrustDomainNameWithResponse call
func ParseGetTrustDomainTrustDomainNameResponse(rsp *http.Response) (*GetTrustDomainTrustDomainNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrustDomainTrustDomainNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.TrustDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutTrustDomainTrustDomainNameResponse parses an HTTP response from a PutTrustDomainTrustDomainNameWithResponse call
func ParsePutTrustDomainTrustDomainNameResponse(rsp *http.Response) (*PutTrustDomainTrustDomainNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTrustDomainTrustDomainNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.TrustDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTrustDomainTrustDomainNameJoinTokenResponse parses an HTTP response from a GetTrustDomainTrustDomainNameJoinTokenWithResponse call
func ParseGetTrustDomainTrustDomainNameJoinTokenResponse(rsp *http.Response) (*GetTrustDomainTrustDomainNameJoinTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrustDomainTrustDomainNameJoinTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JoinTokenResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get relationships based on filters
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Create a relationship request between two Trust Domains
	// (PUT /relationships)
	PutRelationships(ctx echo.Context) error
	// Get a specific relationship
	// (GET /relationships/{relationshipID})
	GetRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Add a specific trust domain
	// (PUT /trust-domain)
	PutTrustDomain(ctx echo.Context) error
	// Get a specific trust domain
	// (GET /trust-domain/{trustDomainName})
	GetTrustDomainTrustDomainName(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Update a specific trust domain
	// (PUT /trust-domain/{trustDomainName})
	PutTrustDomainTrustDomainName(ctx echo.Context, trustDomainName externalRef0.UUID) error
	// Get a join token for a specific Trust Domain
	// (GET /trust-domain/{trustDomainName}/join-token)
	GetTrustDomainTrustDomainNameJoinToken(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", false, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PutRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) PutRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutRelationships(ctx)
	return err
}

// GetRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// PutTrustDomain converts echo context to params.
func (w *ServerInterfaceWrapper) PutTrustDomain(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTrustDomain(ctx)
	return err
}

// GetTrustDomainTrustDomainName converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrustDomainTrustDomainName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrustDomainTrustDomainName(ctx, trustDomainName)
	return err
}

// PutTrustDomainTrustDomainName converts echo context to params.
func (w *ServerInterfaceWrapper) PutTrustDomainTrustDomainName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTrustDomainTrustDomainName(ctx, trustDomainName)
	return err
}

// GetTrustDomainTrustDomainNameJoinToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrustDomainTrustDomainNameJoinToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrustDomainTrustDomainNameJoinToken(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PUT(baseURL+"/relationships", wrapper.PutRelationships)
	router.GET(baseURL+"/relationships/:relationshipID", wrapper.GetRelationshipsRelationshipID)
	router.PUT(baseURL+"/trust-domain", wrapper.PutTrustDomain)
	router.GET(baseURL+"/trust-domain/:trustDomainName", wrapper.GetTrustDomainTrustDomainName)
	router.PUT(baseURL+"/trust-domain/:trustDomainName", wrapper.PutTrustDomainTrustDomainName)
	router.GET(baseURL+"/trust-domain/:trustDomainName/join-token", wrapper.GetTrustDomainTrustDomainNameJoinToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"50+vAm6cff50/p8AAAD///o1bDZzKgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
