// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package admin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for GetRelationshipsParamsStatus.
const (
	Approved GetRelationshipsParamsStatus = "approved"
	Denied   GetRelationshipsParamsStatus = "denied"
	Pending  GetRelationshipsParamsStatus = "pending"
)

// JoinTokenResult defines model for JoinTokenResult.
type JoinTokenResult struct {
	Token externalRef0.JoinToken `json:"token"`
}

// RelationshipRequest defines model for RelationshipRequest.
type RelationshipRequest struct {
	TrustDomainAId externalRef0.UUID `json:"trust_domain_a_id"`
	TrustDomainBId externalRef0.UUID `json:"trust_domain_b_id"`
}

// TrustDomainPut defines model for TrustDomainPut.
type TrustDomainPut struct {
	Description *string                      `json:"description,omitempty"`
	Name        externalRef0.TrustDomainName `json:"name"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	// Status relationship status from a Trust Domain perspective
	Status *GetRelationshipsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// TrustDomainName TrustDomain
	TrustDomainName *externalRef0.TrustDomainName `form:"trustDomainName,omitempty" json:"trustDomainName,omitempty"`
}

// GetRelationshipsParamsStatus defines parameters for GetRelationships.
type GetRelationshipsParamsStatus string

// PutRelationshipsJSONRequestBody defines body for PutRelationships for application/json ContentType.
type PutRelationshipsJSONRequestBody = RelationshipRequest

// PutTrustDomainJSONRequestBody defines body for PutTrustDomain for application/json ContentType.
type PutTrustDomainJSONRequestBody = TrustDomainPut

// PutTrustDomainTrustDomainNameJSONRequestBody defines body for PutTrustDomainTrustDomainName for application/json ContentType.
type PutTrustDomainTrustDomainNameJSONRequestBody = externalRef0.TrustDomain

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRelationships request with any body
	PutRelationshipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRelationships(ctx context.Context, body PutRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelationshipsRelationshipID request
	GetRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTrustDomain request with any body
	PutTrustDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTrustDomain(ctx context.Context, body PutTrustDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrustDomainTrustDomainName request
	GetTrustDomainTrustDomainName(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTrustDomainTrustDomainName request with any body
	PutTrustDomainTrustDomainNameWithBody(ctx context.Context, trustDomainName externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTrustDomainTrustDomainName(ctx context.Context, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTrustDomainTrustDomainNameJoinToken request
	PostTrustDomainTrustDomainNameJoinToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRelationshipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRelationshipsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRelationships(ctx context.Context, body PutRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRelationshipsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRelationshipIDRequest(c.Server, relationshipID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrustDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrustDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrustDomain(ctx context.Context, body PutTrustDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrustDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrustDomainTrustDomainName(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrustDomainTrustDomainNameRequest(c.Server, trustDomainName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrustDomainTrustDomainNameWithBody(ctx context.Context, trustDomainName externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrustDomainTrustDomainNameRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrustDomainTrustDomainName(ctx context.Context, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrustDomainTrustDomainNameRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTrustDomainTrustDomainNameJoinToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTrustDomainTrustDomainNameJoinTokenRequest(c.Server, trustDomainName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TrustDomainName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, *params.TrustDomainName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRelationshipsRequest calls the generic PutRelationships builder with application/json body
func NewPutRelationshipsRequest(server string, body PutRelationshipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRelationshipsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutRelationshipsRequestWithBody generates requests for PutRelationships with any type of body
func NewPutRelationshipsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRelationshipsRelationshipIDRequest generates requests for GetRelationshipsRelationshipID
func NewGetRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTrustDomainRequest calls the generic PutTrustDomain builder with application/json body
func NewPutTrustDomainRequest(server string, body PutTrustDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTrustDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTrustDomainRequestWithBody generates requests for PutTrustDomain with any type of body
func NewPutTrustDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTrustDomainTrustDomainNameRequest generates requests for GetTrustDomainTrustDomainName
func NewGetTrustDomainTrustDomainNameRequest(server string, trustDomainName externalRef0.TrustDomainName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTrustDomainTrustDomainNameRequest calls the generic PutTrustDomainTrustDomainName builder with application/json body
func NewPutTrustDomainTrustDomainNameRequest(server string, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTrustDomainTrustDomainNameRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewPutTrustDomainTrustDomainNameRequestWithBody generates requests for PutTrustDomainTrustDomainName with any type of body
func NewPutTrustDomainTrustDomainNameRequestWithBody(server string, trustDomainName externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTrustDomainTrustDomainNameJoinTokenRequest generates requests for PostTrustDomainTrustDomainNameJoinToken
func NewPostTrustDomainTrustDomainNameJoinTokenRequest(server string, trustDomainName externalRef0.TrustDomainName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/join-token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PutRelationships request with any body
	PutRelationshipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRelationshipsResponse, error)

	PutRelationshipsWithResponse(ctx context.Context, body PutRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRelationshipsResponse, error)

	// GetRelationshipsRelationshipID request
	GetRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, reqEditors ...RequestEditorFn) (*GetRelationshipsRelationshipIDResponse, error)

	// PutTrustDomain request with any body
	PutTrustDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrustDomainResponse, error)

	PutTrustDomainWithResponse(ctx context.Context, body PutTrustDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrustDomainResponse, error)

	// GetTrustDomainTrustDomainName request
	GetTrustDomainTrustDomainNameWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetTrustDomainTrustDomainNameResponse, error)

	// PutTrustDomainTrustDomainName request with any body
	PutTrustDomainTrustDomainNameWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrustDomainTrustDomainNameResponse, error)

	PutTrustDomainTrustDomainNameWithResponse(ctx context.Context, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrustDomainTrustDomainNameResponse, error)

	// PostTrustDomainTrustDomainNameJoinToken request
	PostTrustDomainTrustDomainNameJoinTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*PostTrustDomainTrustDomainNameJoinTokenResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PutRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTrustDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *externalRef0.TrustDomain
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PutTrustDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTrustDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrustDomainTrustDomainNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.TrustDomain
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetTrustDomainTrustDomainNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrustDomainTrustDomainNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTrustDomainTrustDomainNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.TrustDomain
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PutTrustDomainTrustDomainNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTrustDomainTrustDomainNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTrustDomainTrustDomainNameJoinTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JoinTokenResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PostTrustDomainTrustDomainNameJoinTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTrustDomainTrustDomainNameJoinTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PutRelationshipsWithBodyWithResponse request with arbitrary body returning *PutRelationshipsResponse
func (c *ClientWithResponses) PutRelationshipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRelationshipsResponse, error) {
	rsp, err := c.PutRelationshipsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRelationshipsResponse(rsp)
}

func (c *ClientWithResponses) PutRelationshipsWithResponse(ctx context.Context, body PutRelationshipsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRelationshipsResponse, error) {
	rsp, err := c.PutRelationships(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRelationshipsResponse(rsp)
}

// GetRelationshipsRelationshipIDWithResponse request returning *GetRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) GetRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, reqEditors ...RequestEditorFn) (*GetRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.GetRelationshipsRelationshipID(ctx, relationshipID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsRelationshipIDResponse(rsp)
}

// PutTrustDomainWithBodyWithResponse request with arbitrary body returning *PutTrustDomainResponse
func (c *ClientWithResponses) PutTrustDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrustDomainResponse, error) {
	rsp, err := c.PutTrustDomainWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrustDomainResponse(rsp)
}

func (c *ClientWithResponses) PutTrustDomainWithResponse(ctx context.Context, body PutTrustDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrustDomainResponse, error) {
	rsp, err := c.PutTrustDomain(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrustDomainResponse(rsp)
}

// GetTrustDomainTrustDomainNameWithResponse request returning *GetTrustDomainTrustDomainNameResponse
func (c *ClientWithResponses) GetTrustDomainTrustDomainNameWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetTrustDomainTrustDomainNameResponse, error) {
	rsp, err := c.GetTrustDomainTrustDomainName(ctx, trustDomainName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrustDomainTrustDomainNameResponse(rsp)
}

// PutTrustDomainTrustDomainNameWithBodyWithResponse request with arbitrary body returning *PutTrustDomainTrustDomainNameResponse
func (c *ClientWithResponses) PutTrustDomainTrustDomainNameWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrustDomainTrustDomainNameResponse, error) {
	rsp, err := c.PutTrustDomainTrustDomainNameWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrustDomainTrustDomainNameResponse(rsp)
}

func (c *ClientWithResponses) PutTrustDomainTrustDomainNameWithResponse(ctx context.Context, trustDomainName externalRef0.UUID, body PutTrustDomainTrustDomainNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrustDomainTrustDomainNameResponse, error) {
	rsp, err := c.PutTrustDomainTrustDomainName(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrustDomainTrustDomainNameResponse(rsp)
}

// PostTrustDomainTrustDomainNameJoinTokenWithResponse request returning *PostTrustDomainTrustDomainNameJoinTokenResponse
func (c *ClientWithResponses) PostTrustDomainTrustDomainNameJoinTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*PostTrustDomainTrustDomainNameJoinTokenResponse, error) {
	rsp, err := c.PostTrustDomainTrustDomainNameJoinToken(ctx, trustDomainName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTrustDomainTrustDomainNameJoinTokenResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutRelationshipsResponse parses an HTTP response from a PutRelationshipsWithResponse call
func ParsePutRelationshipsResponse(rsp *http.Response) (*PutRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRelationshipsRelationshipIDResponse parses an HTTP response from a GetRelationshipsRelationshipIDWithResponse call
func ParseGetRelationshipsRelationshipIDResponse(rsp *http.Response) (*GetRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutTrustDomainResponse parses an HTTP response from a PutTrustDomainWithResponse call
func ParsePutTrustDomainResponse(rsp *http.Response) (*PutTrustDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTrustDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.TrustDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTrustDomainTrustDomainNameResponse parses an HTTP response from a GetTrustDomainTrustDomainNameWithResponse call
func ParseGetTrustDomainTrustDomainNameResponse(rsp *http.Response) (*GetTrustDomainTrustDomainNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrustDomainTrustDomainNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.TrustDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutTrustDomainTrustDomainNameResponse parses an HTTP response from a PutTrustDomainTrustDomainNameWithResponse call
func ParsePutTrustDomainTrustDomainNameResponse(rsp *http.Response) (*PutTrustDomainTrustDomainNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTrustDomainTrustDomainNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.TrustDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostTrustDomainTrustDomainNameJoinTokenResponse parses an HTTP response from a PostTrustDomainTrustDomainNameJoinTokenWithResponse call
func ParsePostTrustDomainTrustDomainNameJoinTokenResponse(rsp *http.Response) (*PostTrustDomainTrustDomainNameJoinTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTrustDomainTrustDomainNameJoinTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JoinTokenResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get relationships
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Create a relationship request between two Trust Domains
	// (PUT /relationships)
	PutRelationships(ctx echo.Context) error
	// Get a specific relationship
	// (GET /relationships/{relationshipID})
	GetRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Add a specific trust domain
	// (PUT /trust-domain)
	PutTrustDomain(ctx echo.Context) error
	// Get a specific trust domain
	// (GET /trust-domain/{trustDomainName})
	GetTrustDomainTrustDomainName(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Update a specific trust domain
	// (PUT /trust-domain/{trustDomainName})
	PutTrustDomainTrustDomainName(ctx echo.Context, trustDomainName externalRef0.UUID) error
	// Get a join token for a specific Trust Domain
	// (POST /trust-domain/{trustDomainName}/join-token)
	PostTrustDomainTrustDomainNameJoinToken(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, false, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PutRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) PutRelationships(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutRelationships(ctx)
	return err
}

// GetRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// PutTrustDomain converts echo context to params.
func (w *ServerInterfaceWrapper) PutTrustDomain(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTrustDomain(ctx)
	return err
}

// GetTrustDomainTrustDomainName converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrustDomainTrustDomainName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrustDomainTrustDomainName(ctx, trustDomainName)
	return err
}

// PutTrustDomainTrustDomainName converts echo context to params.
func (w *ServerInterfaceWrapper) PutTrustDomainTrustDomainName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTrustDomainTrustDomainName(ctx, trustDomainName)
	return err
}

// PostTrustDomainTrustDomainNameJoinToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostTrustDomainTrustDomainNameJoinToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTrustDomainTrustDomainNameJoinToken(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PUT(baseURL+"/relationships", wrapper.PutRelationships)
	router.GET(baseURL+"/relationships/:relationshipID", wrapper.GetRelationshipsRelationshipID)
	router.PUT(baseURL+"/trust-domain", wrapper.PutTrustDomain)
	router.GET(baseURL+"/trust-domain/:trustDomainName", wrapper.GetTrustDomainTrustDomainName)
	router.PUT(baseURL+"/trust-domain/:trustDomainName", wrapper.PutTrustDomainTrustDomainName)
	router.POST(baseURL+"/trust-domain/:trustDomainName/join-token", wrapper.PostTrustDomainTrustDomainNameJoinToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZbW/bNhD+KwTXD1uhN9uJm/ib26Sdhy4LkhQYGngBLZ5sthKpklTcLNB/H0jJtiSr",
	"fmmTrO2nyOLLHe95nuOdco9DkaSCA9cKD+6xBJUKrsD+OIGIZLE2j6HgGrh9JGkas5BoJrj/QQlu3qlw",
	"BgkxT88kRHiAf/FX+/rFqPKHKTuVUkic57mDKahQstTsgwfYDqDh+QitXDCzyrVm6+Vy4wSlzKwk8bkU",
	"KUjNjMsRiRU4OK28Mq5TMH8jIROi8QAzrvsH2MEJ+cySLMGDw+NjByeMF786QeBgfZdCMRWmIHHu4ASU",
	"IlO7E3wmSRqb8SGaAMk0i7IYgT3BYpqzsqe0ZHxaGHwLfKpneNCtGCnHzWklfMqYBIoH14XfK7vj5Xwx",
	"+QChNj79IRi/Eh+B173qReToMOofuIcvOi/cg8N+1530otDthsf9XtTvk4j0qw5mGaN193p9B6dEa5AG",
	"m3+uA/eYuNH4/ih3l88HOzx3uvkzvHbQiuMXoEqG7YGoXhx5E9lWsWkGtljeFs8LiC2v1Yyl+7JMAtFA",
	"b4iuY9ENuh036Li94Co4GvSCQRC8r8aeEg2uZgk0+NFpiRqj2w797t3oxMzUMlP6hoqEMH5DbkKjp0K9",
	"dKHp8hSlkYkQMRDesvYrjU6+wehkD6NZSh857g32WKlU0K650Ba9tsN9EaEvRnEbXS/gUwZqbyU9ENa7",
	"LmwqcadgtR39ysw6sZO+Q6HWrraqEes2Kg6H9IxoJCGVYBBGegYIuGb6Dv290/VRSdC/oufXQ/e9Tbv/",
	"jtHz3563pt0ZkbegNMgblbIogh1wuzwfvX59WoC+Oz04SWDb3AqEZ2Z67mDBJ4JIyvj0ZpJxGu+2x8ti",
	"6v+WDOxhN+WE9WO1Q7GF6GdlUFfnslrxCjp5oUi20+bgqIUWFRvn2b4p5Gm4vubzVzGsgZ7doy3olsY/",
	"VElljsZ4JBa1OgktjkWU8BumZ9nE0FLGeIBnWqdq4PtT+9oQx/8d5jFofU7Cj0RSf0piQiWDeC2b4TeL",
	"IXQJ8hYk+pNwMoXEwGrKd5VCyKKyQfCwg2MWAldQcWeYknAGqOsFNZcGvj+fzz1iRz0hp365VPlvR69O",
	"zy5P3a4XeDOdWLc00xaaNYeGNGHc+uKiv1Lg5qlnbd2CVMUpOl7gdTo256TAScoMxl7g9bBFaWap7cvK",
	"BWvfTMGG1fDfDoyocQD0RW2i2UKSBDRIhQfXDY3g6q5IaaIzhSIpEkRQoZmCsigFaYKp2a1JGOaiw58y",
	"kHeLlGPQN4uxU+m/lqUWToHTQkzATV9zbTo3KW7BEJMCZ/ZhMWvckuqajlcv3XaHdENxzo6d4bpSx069",
	"F+0GwV59KNOQqG1ma/V+buU6KtZVm0AiJblr61kvszAEpUzzt2REIZhl39xmfXkuf9Fg20Y3SxIi7wo+",
	"IdkglCZTQyVcJ9o4d3CatVDyPFujpCwKxJeC3j1YQ99WgOb1LKtlBvk3Yrk7hE+G0St72SNSAwqVMUYT",
	"0HMAjvRc1CS9CcncaeQb/776c3SS75yALmrrtqWj0QkSkb2Ra7EsBW6S4UrfsrlzHehd5V42A+OfjxdG",
	"u2R5B9bYsQV7mzpdumxpvqTrehJ+DFU3ysG8VHQNqM5jWGvDqRAafQBohpRWodGV8rQCTVWuLcj4940r",
	"bqMqK2e7WrsZN4qyVgiUDUaLHtfv268T5MPfv98A+dNIczf8nV10+H1jW022j5os2jPFj06bd7aTf4zM",
	"4X8QjLvLj9mpUG1ME2oD1VYfuffh3NlPlk+a/0146pxicEQWRxQJWaVKjRMrqhiHUYHb2DqrbOdaAFfv",
	"0WMRkngmlPbUnEynID0mfJIy/7aHTVDLLZt4D1Hx4a7pQYlz7e16ozesl7VM2fJw+fnGjpiikSysvAZa",
	"BrVWRG4shEtX6rXQui8XLVYrAZ+IjFOkRaN59lYGKsHOx/l/AQAA//9UTiGe8RwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
