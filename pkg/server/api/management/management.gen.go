// Package management provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package management

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Defines values for FederationGroupStatus.
const (
	FederationGroupStatusActive   FederationGroupStatus = "active"
	FederationGroupStatusInactive FederationGroupStatus = "inactive"
)

// Defines values for FederationGroupMembershipStatus.
const (
	FederationGroupMembershipStatusActive   FederationGroupMembershipStatus = "active"
	FederationGroupMembershipStatusInactive FederationGroupMembershipStatus = "inactive"
)

// Defines values for SpireServerStatus.
const (
	Active   SpireServerStatus = "active"
	Inactive SpireServerStatus = "inactive"
	Invited  SpireServerStatus = "invited"
)

// FederationGroup defines model for FederationGroup.
type FederationGroup struct {
	Id     int64                  `json:"id"`
	Name   string                 `json:"name"`
	OrgId  int64                  `json:"orgId"`
	Status *FederationGroupStatus `json:"status,omitempty"`
}

// FederationGroupStatus defines model for FederationGroup.Status.
type FederationGroupStatus string

// FederationGroupMembership defines model for FederationGroupMembership.
type FederationGroupMembership struct {
	FederationGroupId int64                           `json:"federationGroupId"`
	Id                *int64                          `json:"id,omitempty"`
	SpireServerId     int64                           `json:"spireServerId"`
	Status            FederationGroupMembershipStatus `json:"status"`
}

// FederationGroupMembershipStatus defines model for FederationGroupMembership.Status.
type FederationGroupMembershipStatus string

// Organization defines model for Organization.
type Organization struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// SpireServer defines model for SpireServer.
type SpireServer struct {
	Description string            `json:"description"`
	Id          int64             `json:"id"`
	Status      SpireServerStatus `json:"status"`
	TrustDomain string            `json:"trustDomain"`
}

// SpireServerStatus defines model for SpireServer.Status.
type SpireServerStatus string

// GetFederationGroupMembershipsParams defines parameters for GetFederationGroupMemberships.
type GetFederationGroupMembershipsParams struct {
	// filter federation groups memberships by orgID
	OrgID *string `form:"orgID,omitempty" json:"orgID,omitempty"`

	// filter federation groups memberships by orgName
	OrgName *string `form:"orgName,omitempty" json:"orgName,omitempty"`

	// filter memberships by trust domain (SpireSever)
	TrustDomain *string `form:"trustDomain,omitempty" json:"trustDomain,omitempty"`

	// filter memberships by status
	Status *GetFederationGroupMembershipsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetFederationGroupMembershipsParamsStatus defines parameters for GetFederationGroupMemberships.
type GetFederationGroupMembershipsParamsStatus string

// GetFederationGroupsParams defines parameters for GetFederationGroups.
type GetFederationGroupsParams struct {
	// filter federation groups by orgId
	OrgId *string `form:"orgId,omitempty" json:"orgId,omitempty"`

	// filter federation groups by orgName
	OrgName *string `form:"orgName,omitempty" json:"orgName,omitempty"`

	// filter organizations by federation group name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetFederationRelationshipsParams defines parameters for GetFederationRelationships.
type GetFederationRelationshipsParams struct {
	// filter federation groups memberships by orgID
	OrgID *string `form:"orgID,omitempty" json:"orgID,omitempty"`

	// filter federation groups memberships by orgName
	OrgName *string `form:"orgName,omitempty" json:"orgName,omitempty"`

	// filter memberships by trust domain (SpireSever)
	TrustDomain *string `form:"trustDomain,omitempty" json:"trustDomain,omitempty"`

	// filter memberships by status
	Status *GetFederationRelationshipsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetFederationRelationshipsParamsStatus defines parameters for GetFederationRelationships.
type GetFederationRelationshipsParamsStatus string

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// filter organizations by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetSpireServersParams defines parameters for GetSpireServers.
type GetSpireServersParams struct {
	// filter SpireServers by trust domain
	TrustDomain *string `form:"trustDomain,omitempty" json:"trustDomain,omitempty"`

	// filter SpireServers by status
	Status *GetSpireServersParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetSpireServersParamsStatus defines parameters for GetSpireServers.
type GetSpireServersParamsStatus string

// CreateSpireServerJSONBody defines parameters for CreateSpireServer.
type CreateSpireServerJSONBody = SpireServer

// CreateSpireServerJSONRequestBody defines body for CreateSpireServer for application/json ContentType.
type CreateSpireServerJSONRequestBody = CreateSpireServerJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /federation-group-memberships)
	GetFederationGroupMemberships(ctx echo.Context, params GetFederationGroupMembershipsParams) error

	// (POST /federation-group-memberships)
	CreateFederationGroupMembership(ctx echo.Context) error

	// (DELETE /federation-group-memberships/{membershipId})
	DeletefederationGroupMembership(ctx echo.Context, membershipId int64) error

	// (GET /federation-group-memberships/{membershipId})
	GetFederationGroupMembershipById(ctx echo.Context, membershipId int64) error

	// (PUT /federation-group-memberships/{membershipId})
	UpdateFederationGroupMembership(ctx echo.Context, membershipId int64) error

	// (GET /federation-groups)
	GetFederationGroups(ctx echo.Context, params GetFederationGroupsParams) error

	// (POST /federation-groups)
	CreateFederationGroup(ctx echo.Context) error

	// (DELETE /federation-groups/{federationGroupID})
	DeleteFederationGroup(ctx echo.Context, federationGroupID int64) error

	// (GET /federation-groups/{federationGroupID})
	GetFederationGroupById(ctx echo.Context, federationGroupID int64) error

	// (PUT /federation-groups/{federationGroupID})
	UpdateFederationGroup(ctx echo.Context, federationGroupID int64) error

	// (GET /federation-relationships)
	GetFederationRelationships(ctx echo.Context, params GetFederationRelationshipsParams) error

	// (POST /federation-relationships)
	CreateFederationRelationship(ctx echo.Context) error

	// (GET /federation-relationships/{relationshipID})
	GetFederationRelationshipByID(ctx echo.Context, relationshipID int64) error

	// (PUT /federation-relationships/{relationshipID})
	UpdateFederationRelationship(ctx echo.Context, relationshipID int64) error

	// (GET /organizations)
	GetOrganizations(ctx echo.Context, params GetOrganizationsParams) error

	// (POST /organizations)
	CreateOrganization(ctx echo.Context) error

	// (DELETE /organizations/{orgID})
	DeleteOrganization(ctx echo.Context, orgID int64) error

	// (GET /organizations/{orgID})
	GetOrgById(ctx echo.Context, orgID int64) error

	// (PUT /organizations/{orgID})
	UpdateOrganization(ctx echo.Context, orgID int64) error

	// (GET /spire-servers)
	GetSpireServers(ctx echo.Context, params GetSpireServersParams) error

	// (POST /spire-servers)
	CreateSpireServer(ctx echo.Context) error

	// (DELETE /spire-servers/{spireServerId})
	DeleteSpireServer(ctx echo.Context, spireServerId int64) error

	// (PUT /spire-servers/{spireServerId})
	UpdateSpireServer(ctx echo.Context, spireServerId int64) error

	// (PUT /trust-bundles/{trustBundleId})
	UpdateTrustBundle(ctx echo.Context, trustBundleId int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFederationGroupMemberships converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationGroupMemberships(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFederationGroupMembershipsParams
	// ------------- Optional query parameter "orgID" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgID", ctx.QueryParams(), &params.OrgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// ------------- Optional query parameter "orgName" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgName", ctx.QueryParams(), &params.OrgName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgName: %s", err))
	}

	// ------------- Optional query parameter "trustDomain" -------------

	err = runtime.BindQueryParameter("form", true, false, "trustDomain", ctx.QueryParams(), &params.TrustDomain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomain: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFederationGroupMemberships(ctx, params)
	return err
}

// CreateFederationGroupMembership converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFederationGroupMembership(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFederationGroupMembership(ctx)
	return err
}

// DeletefederationGroupMembership converts echo context to params.
func (w *ServerInterfaceWrapper) DeletefederationGroupMembership(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "membershipId" -------------
	var membershipId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "membershipId", runtime.ParamLocationPath, ctx.Param("membershipId"), &membershipId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter membershipId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletefederationGroupMembership(ctx, membershipId)
	return err
}

// GetFederationGroupMembershipById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationGroupMembershipById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "membershipId" -------------
	var membershipId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "membershipId", runtime.ParamLocationPath, ctx.Param("membershipId"), &membershipId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter membershipId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFederationGroupMembershipById(ctx, membershipId)
	return err
}

// UpdateFederationGroupMembership converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFederationGroupMembership(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "membershipId" -------------
	var membershipId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "membershipId", runtime.ParamLocationPath, ctx.Param("membershipId"), &membershipId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter membershipId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFederationGroupMembership(ctx, membershipId)
	return err
}

// GetFederationGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFederationGroupsParams
	// ------------- Optional query parameter "orgId" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgId", ctx.QueryParams(), &params.OrgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Optional query parameter "orgName" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgName", ctx.QueryParams(), &params.OrgName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgName: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFederationGroups(ctx, params)
	return err
}

// CreateFederationGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFederationGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFederationGroup(ctx)
	return err
}

// DeleteFederationGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationGroupID" -------------
	var federationGroupID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationGroupID", runtime.ParamLocationPath, ctx.Param("federationGroupID"), &federationGroupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationGroupID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFederationGroup(ctx, federationGroupID)
	return err
}

// GetFederationGroupById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationGroupById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationGroupID" -------------
	var federationGroupID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationGroupID", runtime.ParamLocationPath, ctx.Param("federationGroupID"), &federationGroupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationGroupID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFederationGroupById(ctx, federationGroupID)
	return err
}

// UpdateFederationGroup converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFederationGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationGroupID" -------------
	var federationGroupID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationGroupID", runtime.ParamLocationPath, ctx.Param("federationGroupID"), &federationGroupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationGroupID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFederationGroup(ctx, federationGroupID)
	return err
}

// GetFederationRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationRelationships(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFederationRelationshipsParams
	// ------------- Optional query parameter "orgID" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgID", ctx.QueryParams(), &params.OrgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// ------------- Optional query parameter "orgName" -------------

	err = runtime.BindQueryParameter("form", true, false, "orgName", ctx.QueryParams(), &params.OrgName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgName: %s", err))
	}

	// ------------- Optional query parameter "trustDomain" -------------

	err = runtime.BindQueryParameter("form", true, false, "trustDomain", ctx.QueryParams(), &params.TrustDomain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomain: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFederationRelationships(ctx, params)
	return err
}

// CreateFederationRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFederationRelationship(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFederationRelationship(ctx)
	return err
}

// GetFederationRelationshipByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationRelationshipByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFederationRelationshipByID(ctx, relationshipID)
	return err
}

// UpdateFederationRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFederationRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFederationRelationship(ctx, relationshipID)
	return err
}

// GetOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganizations(ctx, params)
	return err
}

// CreateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrganization(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrganization(ctx)
	return err
}

// DeleteOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgID" -------------
	var orgID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgID", runtime.ParamLocationPath, ctx.Param("orgID"), &orgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOrganization(ctx, orgID)
	return err
}

// GetOrgById converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrgById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgID" -------------
	var orgID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgID", runtime.ParamLocationPath, ctx.Param("orgID"), &orgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrgById(ctx, orgID)
	return err
}

// UpdateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgID" -------------
	var orgID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgID", runtime.ParamLocationPath, ctx.Param("orgID"), &orgID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateOrganization(ctx, orgID)
	return err
}

// GetSpireServers converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpireServers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSpireServersParams
	// ------------- Optional query parameter "trustDomain" -------------

	err = runtime.BindQueryParameter("form", true, false, "trustDomain", ctx.QueryParams(), &params.TrustDomain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomain: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpireServers(ctx, params)
	return err
}

// CreateSpireServer converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSpireServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSpireServer(ctx)
	return err
}

// DeleteSpireServer converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSpireServer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spireServerId" -------------
	var spireServerId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "spireServerId", runtime.ParamLocationPath, ctx.Param("spireServerId"), &spireServerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spireServerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSpireServer(ctx, spireServerId)
	return err
}

// UpdateSpireServer converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSpireServer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spireServerId" -------------
	var spireServerId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "spireServerId", runtime.ParamLocationPath, ctx.Param("spireServerId"), &spireServerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spireServerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSpireServer(ctx, spireServerId)
	return err
}

// UpdateTrustBundle converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTrustBundle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustBundleId" -------------
	var trustBundleId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustBundleId", runtime.ParamLocationPath, ctx.Param("trustBundleId"), &trustBundleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustBundleId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTrustBundle(ctx, trustBundleId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/federation-group-memberships", wrapper.GetFederationGroupMemberships)
	router.POST(baseURL+"/federation-group-memberships", wrapper.CreateFederationGroupMembership)
	router.DELETE(baseURL+"/federation-group-memberships/:membershipId", wrapper.DeletefederationGroupMembership)
	router.GET(baseURL+"/federation-group-memberships/:membershipId", wrapper.GetFederationGroupMembershipById)
	router.PUT(baseURL+"/federation-group-memberships/:membershipId", wrapper.UpdateFederationGroupMembership)
	router.GET(baseURL+"/federation-groups", wrapper.GetFederationGroups)
	router.POST(baseURL+"/federation-groups", wrapper.CreateFederationGroup)
	router.DELETE(baseURL+"/federation-groups/:federationGroupID", wrapper.DeleteFederationGroup)
	router.GET(baseURL+"/federation-groups/:federationGroupID", wrapper.GetFederationGroupById)
	router.PUT(baseURL+"/federation-groups/:federationGroupID", wrapper.UpdateFederationGroup)
	router.GET(baseURL+"/federation-relationships", wrapper.GetFederationRelationships)
	router.POST(baseURL+"/federation-relationships", wrapper.CreateFederationRelationship)
	router.GET(baseURL+"/federation-relationships/:relationshipID", wrapper.GetFederationRelationshipByID)
	router.PUT(baseURL+"/federation-relationships/:relationshipID", wrapper.UpdateFederationRelationship)
	router.GET(baseURL+"/organizations", wrapper.GetOrganizations)
	router.POST(baseURL+"/organizations", wrapper.CreateOrganization)
	router.DELETE(baseURL+"/organizations/:orgID", wrapper.DeleteOrganization)
	router.GET(baseURL+"/organizations/:orgID", wrapper.GetOrgById)
	router.PUT(baseURL+"/organizations/:orgID", wrapper.UpdateOrganization)
	router.GET(baseURL+"/spire-servers", wrapper.GetSpireServers)
	router.POST(baseURL+"/spire-servers", wrapper.CreateSpireServer)
	router.DELETE(baseURL+"/spire-servers/:spireServerId", wrapper.DeleteSpireServer)
	router.PUT(baseURL+"/spire-servers/:spireServerId", wrapper.UpdateSpireServer)
	router.PUT(baseURL+"/trust-bundles/:trustBundleId", wrapper.UpdateTrustBundle)

}
