// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature *externalRef0.Signature `json:"signature,omitempty"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate *externalRef0.Certificate `json:"signing_certificate,omitempty"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State BundlesDigests `json:"state"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token           externalRef0.JWT             `json:"token"`
	TrustDomainID   externalRef0.UUID            `json:"trustDomainID"`
	TrustDomainName externalRef0.TrustDomainName `json:"trustDomainName"`
}

// PatchRelationship defines model for PatchRelationship.
type PatchRelationship struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName externalRef0.TrustDomainName `form:"trustDomainName" json:"trustDomainName"`
}

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationship

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, params.TrustDomainName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Required query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, true, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationship)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
