// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State BundlesDigests `json:"state"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token           externalRef0.JWT             `json:"token"`
	TrustDomainID   externalRef0.UUID            `json:"trustDomainID"`
	TrustDomainName externalRef0.TrustDomainName `json:"trustDomainName"`
}

// PatchRelationship defines model for PatchRelationship.
type PatchRelationship struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName externalRef0.TrustDomainName `form:"trustDomainName" json:"trustDomainName"`
}

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationship

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, params.TrustDomainName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Required query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, true, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationship)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x8eY/bSLLnVyG0749dyDbvQwYeHniLlEiJFCmJGvU2eCQPiZd4Sw1/9wWlsl1VLo+7",
	"e6YHgx37H1PJzMg4fpGRGRXJ3yZ+kZVFDvKmnnz8bVKBuizyGtx/CCB027QZH/0ib0B+f3TLMk18t0mK",
	"HD7VRT621X4MMnd8+q8KhJOPk/8Ff6ULP97WMFsmYlUV1eTTp0/vJgGo/SopRzqTj5P7C4hdK9BXFsZe",
	"T2NH0l+Gj0wEQTKOdNN1VZSgapKR5dBNa/BuUj5rGlkPwPh/WFSZ20w+TpK8oYjJu0nmDknWZpOP5Gz2",
	"bpIl+eMXiiDvJs21BI+uIALV5NO7SQbq2o3ulMDgZmU6vmchD7htk4RtCoG7BJ+7vfs6X91USR49JlyC",
	"PGriyUfs2SRP70dpK3BpkwoEk49/e/D9dd5fvvQvvBPwm5Enrs2DFAhJBOq7aV6q1HNrQBEQyEdKAbSZ",
	"s+8xkoKCe3eoCKEmBpB3JzF590yoECFIKqBdECAMA+gZCggKRXzcx9yAwt0QEBTAAE3TM4YJA8+fYTQS",
	"oiTwZzSKegQ2+Uayz5yu2+YPGq9Ootxt2gr8CFubLx1H0CRRnuTRr/5IKBzB+sPx/LOun95Nmqqtm1+f",
	"lPODodbY9yHg16FBkblJ/ruGCveuupuBbzDwVfxXdF9x+LbI34fM5pr7XBFc/6g1mt+hyccM9QOV9bci",
	"NT9mzQT107rzVzP3btKWgds8KPxOI48cfkesr+S+L+CXyb8r3u8R4cnpPz1z3N9eQORXdPJxwjA4TjIY",
	"jdAICaiQJgDiegBDXcL3SQow2AyhmBnhoSgKGH/m4a5PeRhOznDEBxQRvILdr9jk4yRgXID5HgMAIIHr",
	"MT6KhriHE/gMuISLuQQyQwFCUQTFYDSDoQCgM8qjSYpxCZTwv6GJTz5OUJIIqZAOZ4RLIRiN0aRPgJDy",
	"cOABhKApgJIzz3MDPEDCEKFwLCBQwgM+mAU+ICnv7nev1c2/9P6Xi+P+A4nMoGfeAiU5tBY16GnZfr4g",
	"vh//caKs6BAvmpYiKTxriffWY64pyhy2eJ4Du4jtFY6NFMPlHBGHNYTZzx0+17eZL3H+idW56HyJz4k8",
	"6xGONWqJFbjrMdeMuucNR9gahiz26ta+iSuN7WUWtUWe7aWtvCWcvTaIArviIn3Lsb7GIXEX7HXEw4jh",
	"mIsWu368KTRe0i2L5wQPV3ttQ/RL9k5ZEPitZSN962CzRhG3O+XRT/VyMz3mfoamBzmNA9mODESM7FTn",
	"FEm5aRyxFyyl1wSj1yy2163opqHF2DZogj/op0fbMdfQoo88ZOBvrPrgxbHYdGtpBtELDx4Ugd3ah30c",
	"+zfR0FjiLiHX9/ONPEOPuY+bnXcSTY1lHrJHvWKjuqaIeufn7CCdWPtB2bYEm9xpJ7ZfCSKmWcZVF7Th",
	"mEsCu3n00DQeD/DgSt587CGzZiK93N/5WAucafhZijl7M1XE2fWASa27L+NjHsjpyMNe42yZv9Yyaxhc",
	"dPIZNhJ5gT2sDvtDfJDFQbyxJhfVFReJIuso+JpVOHbQ+GO+3Wp9FImJxiIyv7nIG8XDBUPkWMNmWULh",
	"hJ4d3y/YQuFYQ5jHwDx7HirxPj2Yi7o55v0CURXZXThMQ6veBvMMzKMcRRWifN4qzvzCVby9pWcFSJPz",
	"uTibZ6nzu9JdJLk0F4z5MbfLnahQpi2aTrbhI3zF7BICa1f+FuPIg+tle/7cB4NDin5KopynMXYuBwUr",
	"e4GeJWZ2zDeZdfLraRprQ0SEkkOlXJmIWymR7ZNsmlMKNSl6eaNsYqGCpe7zGUIbveQsuKxMECY65sE1",
	"2nRmYPckqRZlBYLTdCs3J/vMEbFkEbKxh6O4oWZmernBU6ZFAtE4x63dtn51cdORB/lK4HOz50JhIfUO",
	"2Gk0v9YCEsDBatogTMOsvdNta1kdGRsCX4uOssUsmpWU2cbXB+2Yn2MaZiONY1n5FEU6pymKsLbYcMTI",
	"fKOJssDuIm4D99vLHL6eKMPCZw0Cn+fuNHK2UXnMO4uDuSga7Sxxhs+xhnnT5mJvGY6y6B2OM+y5xi5k",
	"YxcjwZylltcZHuB+6+N6vcz07ph7m9n1sOc6H0sRD1fJJapblqx33ga1gp0qGBtU2ibo6JvN6HVLy+hX",
	"ltPYJ611cBU55hrPyjw/YtGWuBvLxbFZBHOzXyVM52H6zZ9rX+bzPktnig/pogY/5s858hxl/rU396QL",
	"VtwJ3E5jfZnbAU5gRe6O3+tFdFlZPuaz3Oc5Q+Q0oZcF/skvLueeNTSOE9ha44uvPPYKJ8XknUf/VnRL",
	"PBh5eOaLS1xNfXl2c/dm5+fnfj6ufiaScpzTS+xXzbK98oXqMed6jdPEaFwbgnlvcprA9GuXpQshk3Xs",
	"i/5Pfjbclrl+83jy5GFIN64h46zHfLnVUeesc0t7u1tux/UP3diI2OgCS+oJutGu5MnP+s/8rDjOESVW",
	"YCVbcW89WR3zgzJ3y9wcFDsv+6m8fFrFAqEXObg3RLZXpELgeXaPyHzy0BOan3mOVcQokppjzikK5xpS",
	"zs59dpZe7eVMwjVesbdcpGiquTu1ui4O51s3Y7TllV3eRHo4rDSWZaVBQ+LimHs9y3Ksxm4ETmYTkaUG",
	"kCa6ychnmMJLJ8g3cLcaYP5UNqImdsxst4tRuK12isgrhnA95lwF5jZGCre+PRuuaZz6HUWSh+X5wueD",
	"Nxg7M1mB7DRTWQ5lVSPqOGqFOmidzLUwKurkmC9Z3MTOKPDEqb3ezT0rmTmWu+RZluV8S1dcvWdZ1hBY",
	"0elNVolkUyT6m+vpZiAw5wt8zDtpjTcGwOIMGch836ZFHxOK1+PpmVckx4PxdCOU6YZmfZOopvty14iL",
	"jSXt1EznTc8/5nu1rTBT5ti5zdI1v6UL9HpgpxuCWZEy428KLL3w+2bpxoW9Wh3mdd01Q3h+pknmSZPm",
	"iRPZhKOUzit2dY2bhNJs+xPwUlrAr4Xk7hFdiLFgF8dRzw/VvFciPrzQx7zwNZ5spugpITVycJfZmieU",
	"6W6PKzBrnneba7KiFcPvBcNRF8VBiTtfZw1xyRmsEEUKd8xZHrRtRRh5e7pkUbup5jaexeHUV4vgZhn6",
	"pSCaAEzXAgoDKXBYcdkygzRF2IYe1GTtHPOENBd9kl7XJNVN8cTBrFna0xvGUhEC3S5jV1mUKKHdNvbN",
	"vIJixdYqbbCCxqfzhS2kY7ywsVJvC4ZxqCQqOgv36rxX9UQ09Ms122yc+Nz0SOMGbXE5XfY5QkX1Nil2",
	"1lbYX+uAPOYXcSAaqlYixdcyjHLmaKeWvCHGi9LHrggdmedzyh3MRjtZcUf4++tV29Ot5QcWzarc+pi3",
	"IAn5YouR6rBvCyYgUXwW9WuUYwGtcNv1gLX0Qoft62ofHLJeC2Erk+ReCPiwvs5D+Jgfag7rl/PiZjkF",
	"u82MmVTYqLqM/G3SXdRpp6dcPN/H6aAFOnJiEHOm3yhRiVLjBBb4ijnmCuxLcgZzzJTA4lXKK8HsEDR5",
	"oPqmuj0lSC8glx50vBuys5Oazjv4VItTZWbfKL/kr/Exr/tpWknBYEcXm2Tc4QIWzEwyp3pBXBBFWU3V",
	"BK3URTXLzxsO4S774rbNRdTh4MWyC5T6mLfOQW0vHlYuzu30drOoyO7ntnXouERfNfsloQ+9Dy8sendb",
	"bQKsX6OIoTDCIiK6MNGF+pjPdxmH+sTilFDRKmLJdmPfXDm7wB2xzf0FaVfTfLb0wjxc+hijkmEDy0WT",
	"5NpVOOOJWx1zCUWc9OKvMrBHWylbeEEC74tKTs98oUm4JQxMlZUzgUs4+JjfN8KiLryxOX6eBilB9lZm",
	"gC/yGuTNpnGb9n72AXmbjScq1/dB2YDxvBCAPLk/lCAPxnG/vEFI3VkvkzPgqsae7CerRFXsm4LqiVIr",
	"uUn6vEIp53K/5dXZB3BVb8FOSVaJMmgnDdEtB18J515J+sTLpOawuXfuXJmITHmWju3uTkKUUzHolohp",
	"J43UBOUaGh82YboYelPdaGCxkDDDIsK+1IAa4tR6daau6vZXNzDquif953o59c3L3BCBzKh3k9JtGlCN",
	"R5X/+zf3/Y19f0Dez47H97/+Mv2f4/HDW23/+3Xj//mf/5q8rak/dcJuijP4YUpjNMPrw/Fj4FtH4lXu",
	"FW4V/MXsPJ04H4kWRfjRGNtWhFeD7tmZfzCZ8+D3NS/fTvOWntZu48cmSO9p1zpOyj+cBL172a/1Fzf7",
	"u8mwFz75bWLyBa232P1HOK2A24DgV7d56c0YgqHvEfQ9jlgI8xFHPiLI4bkbBW4D3jdJBl4lWtE3HCAJ",
	"/hAEPmcq3F+fRP+D+vuGzJ+eP/8zMHxFxfvnSOH9WSm8PyvFI7X2VyLjFdCTMeQ8w+MLFt4y6lsq+i6G",
	"vmuWHzmUDO4KSBqQ/dCTXzjip7v8ymMc+ewvEG5Vudfx9eZ5uv2rhl2ZOuxx9xBOqSaCr6ZwCMyN3mj4",
	"LL0ddvr1sDfVg4Cqzg61vvzmD6dgr14POxLZymlz2OqIs0P7tSWi+k28apbdryw7O+zj3t2r6b2PhQwr",
	"IcJ0y0c14YyquRp7mdl5FnLVTiymnez/fiugPc/A/8z0/cz0/cz0/cz0/cz0/cz0/cz0/cz0/cz0/cz0",
	"/cz0/Ttk+l6XUPzJ+odXZMbjzA/KIF6UEU305Vxty0POLAapULNNogr8emq3xUZdpbG2QOeOcvIpZ02T",
	"HUDJta+p9O2CqktzL932jYbcQmTjL70DmjuO3BlZtJvKKjuQ6zrbXPAMPZ+qAQklVUBE4bI9xO6tcJSi",
	"Zoi1y1xk2N8BhKzRal44Don3KwxHD/K5Oc9JapFfg7mA9T0IrwZfsv/9ncKev3tQgca9T3vjefai8dJ8",
	"ahHb2FYz2BH8GUZfFJacob10MuDX+1a+t1lNkQ/QP3pMgRY3tvx8SlHOcRpgQxrMjciWpZOLSdcDz0nj",
	"acTPuau719Nx3+/tudjLz8P8xPrQY3CtSXZsmBtu7uyG+DBXy8Ouj+y52rnZ9hQIoqdx5ztXbN9vfExq",
	"fHlIlzv9Ch32ZnnI0tO473862dw0Qbtqlkhot+i22o4nG21sG1bCl7Y+Opzv5xrozxxsno41lcafZejp",
	"XJNs5C3uyVsk4DnD2emVs1fPirhtA3l79edq6WN2ZGCzxpelFlgi0LiHoiG+77cbiZMUMYg9WTr7WZp6",
	"PGf42exy2OmIZta9bDwd+Tj1Nh6uPdluHFxNAznNIHenj6e8P3BG4RmYsWY24XrxYoihDh/igd906srt",
	"6RjWCuN00bBZkix3h2oqYAWN6RcGPZiavi5N0SzmOn0jFq5XqFVMdlNoejWqGdPyunM+swLD7C7rdC/E",
	"ZByWEuf4miv2S8zLuGnmS/AOZQ+rwilSemGSwbCfSiwUFEWVwtW211weW9tzws5OhLbewMv6tuM7GpN9",
	"5BRXC421Zaw8jftveLGolq1J1Fhf3SBnIAwM1eM1vaLUShVjkXNEGx2mbXXm27z12RuiopbJLbvmZpN1",
	"V4bYgLiLK9XD4HqjIDGzztOeWXcDkfYFN1zdSptz7JKb+xHJytu2tH163/I6o5DpygCEkPEmTZ4HqVhL",
	"BgEgursQB1WaP04n4nf2ByLHcmK5EDKTuTKq6WHZZlPmmGjwkBacPXmP7DSjwoQF7OSVnSL0VMnsrF9p",
	"Xslf2pXqIA6bshQznEnYaG6hwgghj9WCIe4huVfPyMkstlgeINtqgc9u7K2jZphidtUVRubBgCJIFjLS",
	"uc/k4gb7fmYNm6l8JTFTMKfQdOPBIcsWSTbssHm999o8YTHF68+erlUVMl3Fa089cCscFS/BDj30JBbP",
	"hn3jb2i2XUpQwHl1dtrtJVXc4fhS0EQDD0+HZGP6lzgKt4OmhI1xS8QUbbaMTBvqvkrOGuUW7dKRNjrk",
	"4yrRqAhMznw+iOU9UgCz75b4UtozKkG1qCQRfsjVuVc4qSaGuLNYcat9lgzu3AXRf0PfjVyvKyk/Tr5J",
	"WGKvI4hxi69D1Q2UpwewXJit2yLFOh8KGwtVQKW17GG6Mh0W9vS8t9dU0h7CngxnhhinUbgMGCOIGho/",
	"iWVWUkQanwJiDqPm2dtHUmDWITzf86UBs8WlaM1ajMtrpsT9MvQJn1V5NVkMEXqrq/UURVfkbYZ2gVWX",
	"RevZB9dspIGf8mjBYVPat4t/QgQRNXh/JWRfHPL5vnDoMGVwTCwoDj3850aQ81VPX0eQe9t/eAQRDkpb",
	"GyYlCpixMyG2XsQngM629pb3c0dLJFsIzpbkzTfaokNdWSYu4p4sb0lpRJcY6JU1kIWXrpwDfeIRBirC",
	"Zi/QZxxQh4MLb3NcJl0gLuQljvnYaVH3U05iVDo2cntHX2OmWWMVUl3XndDNp1EQQzktGZtlKc2xcFZt",
	"k1MbnHV4dRbmsU4v2DLuNDYn/MrfTmtqPfDXQ24dujJJPOlMnG0zgFweuwqK68eOLLJMGq8HBw/p+QJm",
	"OFfMMzyfclxHabcg3py661CG8ODT2z2y3+RnYX2IoTK/nbwZWN3q86pbnff7A0gLBOcW1NoEcBu74Q4/",
	"9bNZvmSvhaq6gyVIzNpJ1UDbDhGgIKzu0CQ0hR9GkOXqcEA2UbHdDjZYXFZbRKdUiYPkDTlrzqULk8t6",
	"Z2wcNNgVjG8gfVDOzld0fttf17tDNmymV19tdDPeHfa8HEWaoleysqwh4dDUZ568pNvrloUXcWK2oudj",
	"jRIeCB2GzdaQ5zRGU0gHHxi32JnrFGcVbZ/aCM2sdBmKHDwtpgi61Zuu9YgZZ3cXGG0y2DJBbGW9bYtz",
	"o1sajHTLhZvjJ/Ngc9B9egV2bKwNK2ihZsvA8GiMvuxac1li0zpOrt6KKk95TsLaibuet55U6BeVc4M2",
	"soV4nkbwbiX5yarZU9Bs7TbzMl1Zu/Y866YMX2lSqiJXKeFxFNSSBa+d+GpZV0O4BBhbWFqQknVWk/js",
	"RrrMPxZB8NcRxCM8b6esTufWAeCmSclui3srnqgOF8NlxRS5BX6S2lNtTgJRFqygyFYzUT83mxSmHca/",
	"dJJqS1yfltIt3rNTld7u5Hhzo4l2sQksyyLCXmIuJVItWyReOlKSISZRrVRd6iOs7e3V1RGIOspJZREe",
	"DsbBZQIHrK02sgarNK9GcbJvOYNy2T8jgnA+0566LFuvthQZLwglavpm0dK5If+nRhBdYPvHX1e+RpCn",
	"tv/0COLArGNPp2XVcLEOXVCMZc8kbQW6EwXiktrgjT7Ni7yK0gKZCe30eqmE9sLG667xJVRqdhtvtd5y",
	"XqaIc6qDKjrStzUrcESwnk23puK5lqPnZb2dzS4Vuuupbtes8k6be+u4267VPJcucnhoctPvOoGA0nSj",
	"NyV7wI2VFFb7A57KtnvCulVL50O/YMrITpj2RtHArOfLTCE2U565bFbh/iS3UhZDNINnO3dvGFe6Ju0o",
	"SeTtju9rAzAaepmmA7897Bx851zBaroRTY9j4KXWzzYJ6UjnjRdAO2ptYeYAd8AZxHVaadOFh1PpaXHL",
	"/IDZ9QApFYTMjFOANvICNDMGP5hz0hfzOWf0EQ9d3Eiizeb2wwiiMUQ3y2CO8DDU1ug4dIiN2XZQXopG",
	"QJabzTY2DyiqE/spijkufqXo+Kqf6AtONltW0bKTT2R7mhSIoFuV68NZE3fweV9Bl+l1leJnegn3bXfb",
	"SYnC8fD5ZDAcqXc96wVoX4bY5XQy5FW1nSOMluxXh5U5zJjZrrFCCOmWO5RZ6ajSr7s1O5U6LvQXN5VP",
	"gU7idpJk7Gl/QVHsMj13Pb20DwGP34CIhOscacUZdFlRuzi1d+AcyM2WGy4Fc1s6gDP8Yclpg1hvgDPT",
	"cZuul/sSTlqH0GKyC+Pr/GbUsGRAmngF8w26QbcL1d8tuI5EaRFdTW87jYwyHqFXFKKdDsF1d9p7J2NV",
	"GEYKi6y9xA9Ezxp/MIK8daHlrczX/+fX6X54H+4PX4Czvi3q+vr3/zvND4+o/cEvsh9f4ySYNzKd97qX",
	"F4Tx0GXIkCLekzRKvydICnvv4aH/HvNnFB5SlBu61PPJ2vZeOvJsKvxVTSDyfua+D3/5jfn0/ssz8Tue",
	"UezTG0WBo5WB31ZJc92MdnjAJXarDtQNqH5125GH7xju5UD41aj7Zd8kD4vP94hd/16/8qgCmshJE7fe",
	"5N2krdLJx0ncNGX9EYaje/NoA3gO+hQ0zdr1z24VwJGbukGVgHTyzSVi+fMraAOqDlTQ/DMr95vFdQn8",
	"BzSSIv8weTdJEx/kNXjGDVu6fgwg7APygqOPMNz3/Qf3/vZDUUXw09AaXiq8qG/E99gH5EPcZHeumqS5",
	"W/0H/LyHViXIxyf8Pl8HqvohCPoB+YCiI6miBLlbJiOEPiAf8MkdBPHdOnD1rLjn3hI9KoNGj7+/UIKR",
	"CdCYLzqOJCo3Aw2o6snHv/02ScYpLy2orpN3nxXhvyj+evc7b3h/Uzj4uhjnOcvQo4AQCqsig1zo7pjQ",
	"wzOhElSjtZqkG337LQZfV00+XyiaqgW/l+VvqzZ/effyGjyGIP+0K/Cv67jeuAm/aX0f1HXYptAXQz6g",
	"/uU2/lszfGEZ/nxt/7lT3+382p3/9ssoa91mmVtdJx8ny6Ru7pfCXwBrdJTGjUaoTF4C6ZdxhpcohH97",
	"/lMRPo3slm7jx98C89ua1m+Q+VIzivD51nr1ctQdH6NffIXHSzb+NDoeFYwPSFxaUDefb03/U9DwrQbe",
	"wIP5hss0BeQB6Kka8RvhPv2LAPzvhV72fl8AFkCegPoFQqAn29U/QPJ9SXn/iP7wqW/+3pKqg17dWdZT",
	"Sfdfpu6vpfr/VrqWQQO5UAVy0IMAUncWdC9uh/qkie8OWrsZgPzUTbIacut7U1ElUZK7KVTk4JkhxsEP",
	"Nb5hhOJxPeCZIV6tCA3U1qCGXOhUJPkTE00BjVwXVXID95m/SAONfWIAfROX3TyAItBASVPfpWHvioU+",
	"m/el9Z/uLPxotVJfcDS6aw0CKCwq6Emqx27yrdg2CvMVWt9bt15v4f7KuPXynsabq1TTVnkNuTnkPpT3",
	"puijYUDe3JnIo6+WqaEihzwQu2n4eY1/vh/48Odh/QWzqy9ah1woB/3LDcd3kPEMqJ/N/gZMf3u1GfkE",
	"P44ldzOU7RsryNfvofwARS+YzB8bnTfC3V+8G/rnh76vCngDTI+Xfy7K/bsskXaZFm7wBLW7eZ6+tTOK",
	"dV8iXwPsYeqnj4T8IZjB9VM9TVnU3wXbvebmPxptX7568wbknj7KMi4+bppCIQhGDYLgyWhjCHObl0uG",
	"31YVyJv0Cp3zor/vk/91+7BvPpbzhkxSUYEkyqEXwII+f6HmX+IFI4NxVeTJDdRvKPW+X/g7a+43LnGf",
	"f+z0QO/LnEFa+G4aF3Xzoe7dKALVh6SA3TKBO3wysvVE9TXoV5+d5WnXCIK7iz53WTD4sZtH404jD6D6",
	"i1CP9eSLX7xk99vT77OZxmD4mOLh3C83BU/0Poecv0vpGc8vNr0eaHowRuBns9Rfab/cAH/65dP/CwAA",
	"//84FNoBC04AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
