// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State BundlesDigests `json:"state"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token         externalRef0.JWT  `json:"token"`
	TrustDomainID externalRef0.UUID `json:"trustDomainID"`
}

// RelationshipApproval defines model for RelationshipApproval.
type RelationshipApproval struct {
	Accept bool `json:"accept"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName externalRef0.TrustDomainName `form:"trustDomainName" json:"trustDomainName"`
}

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipsRelationshipIDJSONRequestBody defines body for PatchRelationshipsRelationshipID for application/json ContentType.
type PatchRelationshipsRelationshipIDJSONRequestBody = RelationshipApproval

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, params.TrustDomainName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipsRelationshipIDRequest calls the generic PatchRelationshipsRelationshipID builder with application/json body
func NewPatchRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipsRelationshipIDRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipsRelationshipIDRequestWithBody generates requests for PatchRelationshipsRelationshipID with any type of body
func NewPatchRelationshipsRelationshipIDRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipsRelationshipIDWithBodyWithResponse request with arbitrary body returning *PatchRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipIDWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipID(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipsRelationshipIDResponse parses an HTTP response from a PatchRelationshipsRelationshipIDWithResponse call
func ParsePatchRelationshipsRelationshipIDResponse(rsp *http.Response) (*PatchRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Required query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, true, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationshipsRelationshipID)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
