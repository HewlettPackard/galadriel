// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State BundlesDigests `json:"state"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token         externalRef0.JWT  `json:"token"`
	TrustDomainID externalRef0.UUID `json:"trustDomainID"`
}

// PatchRelationship defines model for PatchRelationship.
type PatchRelationship struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName externalRef0.TrustDomainName `form:"trustDomainName" json:"trustDomainName"`
}

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationship

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, params.TrustDomainName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Required query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, true, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationship)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
