// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// BundlesUpdates defines model for BundlesUpdates.
type BundlesUpdates map[string]BundlesUpdatesItem

// BundlesUpdatesItem defines model for BundlesUpdatesItem.
type BundlesUpdatesItem struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// GetJwtResponse defines model for GetJwtResponse.
type GetJwtResponse struct {
	Token externalRef0.JWT `json:"token"`
}

// GetRelationshipResponse defines model for GetRelationshipResponse.
type GetRelationshipResponse = []externalRef0.Relationship

// OnboardHarvesterResponse defines model for OnboardHarvesterResponse.
type OnboardHarvesterResponse struct {
	Token           externalRef0.JWT             `json:"token"`
	TrustDomainID   externalRef0.UUID            `json:"trustDomainID"`
	TrustDomainName externalRef0.TrustDomainName `json:"trustDomainName"`
}

// PatchRelationshipRequest defines model for PatchRelationshipRequest.
type PatchRelationshipRequest struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// PostBundleSyncRequest defines model for PostBundleSyncRequest.
type PostBundleSyncRequest struct {
	State BundlesDigests `json:"state"`
}

// PostBundleSyncResponse defines model for PostBundleSyncResponse.
type PostBundleSyncResponse struct {
	State   BundlesDigests `json:"state"`
	Updates BundlesUpdates `json:"updates"`
}

// PutBundleRequest defines model for PutBundleRequest.
type PutBundleRequest struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature *externalRef0.Signature `json:"signature,omitempty"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate *externalRef0.Certificate `json:"signing_certificate,omitempty"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	Status *externalRef0.ConsentStatus `form:"status,omitempty" json:"status,omitempty"`

	// PageSize TrustDomain
	PageSize *externalRef0.PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// PageNumber TrustDomain
	PageNumber *externalRef0.PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// StartDate Default value will be 30 days ago
	StartDate *externalRef0.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Default value will the current date
	EndDate *externalRef0.Date `form:"endDate,omitempty" json:"endDate,omitempty"`
}

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = PutBundleRequest

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = PostBundleSyncRequest

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationshipRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelationships request
	GetRelationships(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server, trustDomainName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, trustDomainName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelationships(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, trustDomainName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, trustDomainName, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, trustDomainName, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string, trustDomainName externalRef0.TrustDomainName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/jwt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, trustDomainName externalRef0.TrustDomainName, params *OnboardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/onboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/relationships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, trustDomainName, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/relationships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostBundleSyncResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetJwtResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardHarvesterResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRelationshipResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, trustDomainName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, trustDomainName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, trustDomainName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, trustDomainName, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, trustDomainName, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostBundleSyncResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetJwtResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardHarvesterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRelationshipResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/{trustDomainName}/jwt)
	GetNewJWTToken(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/{trustDomainName}/onboard)
	Onboard(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, params OnboardParams) error
	// List the relationships.
	// (GET /trust-domain/{trustDomainName}/relationships)
	GetRelationships(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /trust-domain/{trustDomainName}/relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx, trustDomainName)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, trustDomainName, params)
	return err
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, trustDomainName, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, trustDomainName, relationshipID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)
	router.GET(baseURL+"/trust-domain/:trustDomainName/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/:trustDomainName/onboard", wrapper.Onboard)
	router.GET(baseURL+"/trust-domain/:trustDomainName/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/trust-domain/:trustDomainName/relationships/:relationshipID", wrapper.PatchRelationship)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NRam2j4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
