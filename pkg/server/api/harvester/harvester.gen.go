// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature *externalRef0.Signature `json:"signature,omitempty"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate *externalRef0.Certificate `json:"signing_certificate,omitempty"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State BundlesDigests `json:"state"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token           externalRef0.JWT             `json:"token"`
	TrustDomainID   externalRef0.UUID            `json:"trustDomainID"`
	TrustDomainName externalRef0.TrustDomainName `json:"trustDomainName"`
}

// PatchRelationship defines model for PatchRelationship.
type PatchRelationship struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName externalRef0.TrustDomainName `form:"trustDomainName" json:"trustDomainName"`
}

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationship

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, params.TrustDomainName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Required query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, true, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationship)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
