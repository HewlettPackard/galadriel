// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State BundlesDigests `json:"state"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token         externalRef0.JWT  `json:"token"`
	TrustDomainID externalRef0.UUID `json:"trustDomainID"`
}

// RelationshipApproval defines model for RelationshipApproval.
type RelationshipApproval struct {
	Accept bool `json:"accept"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName externalRef0.TrustDomainName `form:"trustDomainName" json:"trustDomainName"`
}

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipsRelationshipIDJSONRequestBody defines body for PatchRelationshipsRelationshipID for application/json ContentType.
type PatchRelationshipsRelationshipIDJSONRequestBody = RelationshipApproval

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, params.TrustDomainName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipsRelationshipIDRequest calls the generic PatchRelationshipsRelationshipID builder with application/json body
func NewPatchRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipsRelationshipIDRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipsRelationshipIDRequestWithBody generates requests for PatchRelationshipsRelationshipID with any type of body
func NewPatchRelationshipsRelationshipIDRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipsRelationshipIDWithBodyWithResponse request with arbitrary body returning *PatchRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipIDWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipID(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipsRelationshipIDResponse parses an HTTP response from a PatchRelationshipsRelationshipIDWithResponse call
func ParsePatchRelationshipsRelationshipIDResponse(rsp *http.Response) (*PatchRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Required query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, true, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationshipsRelationshipID)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"n61SfZ375QH40y+f/l8AAAD//5/vBFO3TAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
