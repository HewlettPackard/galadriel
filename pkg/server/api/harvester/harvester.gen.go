// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
	Join_tokenScopes     = "join_token.Scopes"
)

// Defines values for GetRelationshipsParamsStatus.
const (
	Accepted GetRelationshipsParamsStatus = "accepted"
	Denied   GetRelationshipsParamsStatus = "denied"
	Pending  GetRelationshipsParamsStatus = "pending"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State *BundlesDigests `json:"state,omitempty"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token         externalRef0.JWT  `json:"token"`
	TrustDomainID externalRef0.UUID `json:"trustDomainID"`
}

// RelationshipApproval defines model for RelationshipApproval.
type RelationshipApproval struct {
	Accept bool `json:"accept"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	Status *GetRelationshipsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName *externalRef0.TrustDomainName `form:"trustDomainName,omitempty" json:"trustDomainName,omitempty"`
}

// GetRelationshipsParamsStatus defines parameters for GetRelationships.
type GetRelationshipsParamsStatus string

// PatchRelationshipsRelationshipIDJSONRequestBody defines body for PatchRelationshipsRelationshipID for application/json ContentType.
type PatchRelationshipsRelationshipIDJSONRequestBody = RelationshipApproval

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TrustDomainName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, *params.TrustDomainName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipsRelationshipIDRequest calls the generic PatchRelationshipsRelationshipID builder with application/json body
func NewPatchRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipsRelationshipIDRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipsRelationshipIDRequestWithBody generates requests for PatchRelationshipsRelationshipID with any type of body
func NewPatchRelationshipsRelationshipIDRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipsRelationshipIDWithBodyWithResponse request with arbitrary body returning *PatchRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipIDWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipID(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipsRelationshipIDResponse parses an HTTP response from a PatchRelationshipsRelationshipIDWithResponse call
func ParsePatchRelationshipsRelationshipIDResponse(rsp *http.Response) (*PatchRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (POST /trust-domain/onboard)
	Onboard(ctx echo.Context) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, false, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	ctx.Set(Join_tokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationshipsRelationshipID)
	router.POST(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
