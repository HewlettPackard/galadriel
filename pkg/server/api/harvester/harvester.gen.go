// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State *BundlesDigests `json:"state,omitempty"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token         externalRef0.JWT  `json:"token"`
	TrustDomainID externalRef0.UUID `json:"trustDomainID"`
}

// RelationshipApproval defines model for RelationshipApproval.
type RelationshipApproval struct {
	Accept bool `json:"accept"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName *externalRef0.TrustDomainName `form:"trustDomainName,omitempty" json:"trustDomainName,omitempty"`
}

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipsRelationshipIDJSONRequestBody defines body for PatchRelationshipsRelationshipID for application/json ContentType.
type PatchRelationshipsRelationshipIDJSONRequestBody = RelationshipApproval

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TrustDomainName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, *params.TrustDomainName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipsRelationshipIDRequest calls the generic PatchRelationshipsRelationshipID builder with application/json body
func NewPatchRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipsRelationshipIDRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipsRelationshipIDRequestWithBody generates requests for PatchRelationshipsRelationshipID with any type of body
func NewPatchRelationshipsRelationshipIDRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipsRelationshipIDWithBodyWithResponse request with arbitrary body returning *PatchRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipIDWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipID(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipsRelationshipIDResponse parses an HTTP response from a PatchRelationshipsRelationshipIDWithResponse call
func ParsePatchRelationshipsRelationshipIDResponse(rsp *http.Response) (*PatchRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Optional query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, false, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationshipsRelationshipID)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
