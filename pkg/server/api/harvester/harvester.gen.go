// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
	Join_tokenScopes     = "join_token.Scopes"
)

// BundleDigests defines model for BundleDigests.
type BundleDigests struct {
	Status map[string]externalRef0.BundleDigest `json:"status"`
}

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate Base-64 encoded Trust Bundle in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle Base-64 encoded Trust Bundle in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   []TrustBundleSync `json:"state"`
	Updates []TrustBundleSync `json:"updates"`
}

// Onboard defines model for Onboard.
type Onboard struct {
	// OnboardingTrustBundle Base-64 encoded Trust Bundle in PEM format
	OnboardingTrustBundle *externalRef0.TrustBundle `json:"onboarding_trust_bundle,omitempty"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token         externalRef0.JWT  `json:"token"`
	TrustDomainID externalRef0.UUID `json:"trustDomainID"`
}

// RelationshipApproval defines model for RelationshipApproval.
type RelationshipApproval struct {
	Accept bool `json:"accept"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate Base-64 encoded Trust Bundle in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle Base-64 encoded Trust Bundle in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	// Status relationship status from a Trust Domain perspective
	Status *[]string `form:"status,omitempty" json:"status,omitempty"`
}

// PatchRelationshipsRelationshipIDJSONRequestBody defines body for PatchRelationshipsRelationshipID for application/json ContentType.
type PatchRelationshipsRelationshipIDJSONRequestBody = RelationshipApproval

// OnboardJSONRequestBody defines body for Onboard for application/json ContentType.
type OnboardJSONRequestBody = Onboard

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleDigests

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request with any body
	OnboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Onboard(ctx context.Context, body OnboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OnboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, body OnboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipsRelationshipIDRequest calls the generic PatchRelationshipsRelationshipID builder with application/json body
func NewPatchRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipsRelationshipIDRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipsRelationshipIDRequestWithBody generates requests for PatchRelationshipsRelationshipID with any type of body
func NewPatchRelationshipsRelationshipIDRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOnboardRequest calls the generic Onboard builder with application/json body
func NewOnboardRequest(server string, body OnboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOnboardRequestWithBody(server, "application/json", bodyReader)
}

// NewOnboardRequestWithBody generates requests for Onboard with any type of body
func NewOnboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	// Onboard request with any body
	OnboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	OnboardWithResponse(ctx context.Context, body OnboardJSONRequestBody, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipsRelationshipIDWithBodyWithResponse request with arbitrary body returning *PatchRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipIDWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipID(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

// OnboardWithBodyWithResponse request with arbitrary body returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.OnboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, body OnboardJSONRequestBody, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipsRelationshipIDResponse parses an HTTP response from a PatchRelationshipsRelationshipIDWithResponse call
func ParsePatchRelationshipsRelationshipIDResponse(rsp *http.Response) (*PatchRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (POST /trust-domain/onboard)
	Onboard(ctx echo.Context) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", false, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	ctx.Set(Join_tokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationshipsRelationshipID)
	router.POST(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
