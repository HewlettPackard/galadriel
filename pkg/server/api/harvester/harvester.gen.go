// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest    externalRef0.BundleDigest `json:"digest"`
	Signature *externalRef0.Signature   `json:"signature,omitempty"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate *externalRef0.Certificate `json:"signing_certificate,omitempty"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State BundlesDigests `json:"state"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token           externalRef0.JWT             `json:"token"`
	TrustDomainID   externalRef0.UUID            `json:"trustDomainID"`
	TrustDomainName externalRef0.TrustDomainName `json:"trustDomainName"`
}

// PatchRelationship defines model for PatchRelationship.
type PatchRelationship struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName externalRef0.TrustDomainName `form:"trustDomainName" json:"trustDomainName"`
}

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationship

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, params.TrustDomainName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Required query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, true, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationship)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P5ul/kr75Qb400+f/l8AAAD//zLm4jMoTgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
