// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature *externalRef0.Signature `json:"signature,omitempty"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate *externalRef0.Certificate `json:"signing_certificate,omitempty"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State BundlesDigests `json:"state"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token           externalRef0.JWT             `json:"token"`
	TrustDomainID   externalRef0.UUID            `json:"trustDomainID"`
	TrustDomainName externalRef0.TrustDomainName `json:"trustDomainName"`
}

// PatchRelationship defines model for PatchRelationship.
type PatchRelationship struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`
}

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationship

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelationships request
	GetRelationships(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server, trustDomainName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, trustDomainName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelationships(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, trustDomainName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, trustDomainName, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, trustDomainName, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string, trustDomainName externalRef0.TrustDomainName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/jwt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, trustDomainName externalRef0.TrustDomainName, params *OnboardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/onboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/relationships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, trustDomainName, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/relationships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, trustDomainName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, trustDomainName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, trustDomainName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, trustDomainName, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, trustDomainName, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/{trustDomainName}/jwt)
	GetNewJWTToken(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/{trustDomainName}/onboard)
	Onboard(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, params OnboardParams) error
	// List the relationships.
	// (GET /trust-domain/{trustDomainName}/relationships)
	GetRelationships(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /trust-domain/{trustDomainName}/relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx, trustDomainName)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, trustDomainName, params)
	return err
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, trustDomainName, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, trustDomainName, relationshipID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)
	router.GET(baseURL+"/trust-domain/:trustDomainName/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/:trustDomainName/onboard", wrapper.Onboard)
	router.GET(baseURL+"/trust-domain/:trustDomainName/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/trust-domain/:trustDomainName/relationships/:relationshipID", wrapper.PatchRelationship)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
