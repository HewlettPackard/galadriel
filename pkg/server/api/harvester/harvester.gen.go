// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
	Join_tokenScopes     = "join_token.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate Base-64 encoded Trust Bundle in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle Base-64 encoded Trust Bundle in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State *BundlesDigests `json:"state,omitempty"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token         externalRef0.JWT  `json:"token"`
	TrustDomainID externalRef0.UUID `json:"trustDomainID"`
}

// RelationshipApproval defines model for RelationshipApproval.
type RelationshipApproval struct {
	Accept bool `json:"accept"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate Base-64 encoded Trust Bundle in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle Base-64 encoded Trust Bundle in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	// Status relationship status from a Trust Domain perspective
	Status *[]string `form:"status,omitempty" json:"status,omitempty"`
}

// PatchRelationshipsRelationshipIDJSONRequestBody defines body for PatchRelationshipsRelationshipID for application/json ContentType.
type PatchRelationshipsRelationshipIDJSONRequestBody = RelationshipApproval

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipsRelationshipIDRequest calls the generic PatchRelationshipsRelationshipID builder with application/json body
func NewPatchRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipsRelationshipIDRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipsRelationshipIDRequestWithBody generates requests for PatchRelationshipsRelationshipID with any type of body
func NewPatchRelationshipsRelationshipIDRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipsRelationshipIDWithBodyWithResponse request with arbitrary body returning *PatchRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipIDWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipID(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipsRelationshipIDResponse parses an HTTP response from a PatchRelationshipsRelationshipIDWithResponse call
func ParsePatchRelationshipsRelationshipIDResponse(rsp *http.Response) (*PatchRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (POST /trust-domain/onboard)
	Onboard(ctx echo.Context) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", false, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	ctx.Set(Join_tokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationshipsRelationshipID)
	router.POST(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
