// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest    externalRef0.BundleDigest `json:"digest"`
	Signature externalRef0.Signature    `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State BundlesDigests `json:"state"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token           externalRef0.JWT             `json:"token"`
	TrustDomainID   externalRef0.UUID            `json:"trustDomainID"`
	TrustDomainName externalRef0.TrustDomainName `json:"trustDomainName"`
}

// PatchRelationship defines model for PatchRelationship.
type PatchRelationship struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName externalRef0.TrustDomainName `form:"trustDomainName" json:"trustDomainName"`
}

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationship

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, params.TrustDomainName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Required query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, true, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationship)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"v8798gD86adP/y8AAP//MoLkuUpOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
