// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// Defines values for GetRelationshipsParamsStatus.
const (
	Accepted GetRelationshipsParamsStatus = "accepted"
	Denied   GetRelationshipsParamsStatus = "denied"
	Pending  GetRelationshipsParamsStatus = "pending"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State *BundlesDigests `json:"state,omitempty"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// JWTResult defines model for JWTResult.
type JWTResult struct {
	Token externalRef0.JWT `json:"token"`
}

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token         externalRef0.JWT  `json:"token"`
	TrustDomainID externalRef0.UUID `json:"trustDomainID"`
}

// RelationshipApproval defines model for RelationshipApproval.
type RelationshipApproval struct {
	Accept bool `json:"accept"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle X.509 certificate in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	Status *GetRelationshipsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName *externalRef0.TrustDomainName `form:"trustDomainName,omitempty" json:"trustDomainName,omitempty"`
}

// GetRelationshipsParamsStatus defines parameters for GetRelationships.
type GetRelationshipsParamsStatus string

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// PatchRelationshipsRelationshipIDJSONRequestBody defines body for PatchRelationshipsRelationshipID for application/json ContentType.
type PatchRelationshipsRelationshipIDJSONRequestBody = RelationshipApproval

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TrustDomainName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, *params.TrustDomainName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipsRelationshipIDRequest calls the generic PatchRelationshipsRelationshipID builder with application/json body
func NewPatchRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipsRelationshipIDRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipsRelationshipIDRequestWithBody generates requests for PatchRelationshipsRelationshipID with any type of body
func NewPatchRelationshipsRelationshipIDRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, params *OnboardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWTResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipsRelationshipIDWithBodyWithResponse request with arbitrary body returning *PatchRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipIDWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipID(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipsRelationshipIDResponse parses an HTTP response from a PatchRelationshipsRelationshipIDWithResponse call
func ParsePatchRelationshipsRelationshipIDResponse(rsp *http.Response) (*PatchRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWTResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/jwt)
	GetNewJWTToken(ctx echo.Context) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/onboard)
	Onboard(ctx echo.Context, params OnboardParams) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, false, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, params)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationshipsRelationshipID)
	router.GET(baseURL+"/trust-domain/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"T/8vAAD//17fawRNTAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
