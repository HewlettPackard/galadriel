// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
	Join_tokenScopes     = "join_token.Scopes"
)

// Defines values for GetRelationshipsParamsStatus.
const (
	Accepted GetRelationshipsParamsStatus = "accepted"
	Denied   GetRelationshipsParamsStatus = "denied"
	Pending  GetRelationshipsParamsStatus = "pending"
)

// BundlePut defines model for BundlePut.
type BundlePut struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate Base-64 encoded Trust Bundle in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle Base-64 encoded Trust Bundle in PEM format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// BundleSyncBody defines model for BundleSyncBody.
type BundleSyncBody struct {
	State *BundlesDigests `json:"state,omitempty"`
}

// BundleSyncResult defines model for BundleSyncResult.
type BundleSyncResult struct {
	State   BundlesDigests  `json:"state"`
	Updates TrustBundleSync `json:"updates"`
}

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// OnboardResult defines model for OnboardResult.
type OnboardResult struct {
	Token         externalRef0.JWT  `json:"token"`
	TrustDomainID externalRef0.UUID `json:"trustDomainID"`
}

// RelationshipApproval defines model for RelationshipApproval.
type RelationshipApproval struct {
	Accept bool `json:"accept"`
}

// RelationshipGet defines model for RelationshipGet.
type RelationshipGet = []externalRef0.Relationship

// TrustBundleSync defines model for TrustBundleSync.
type TrustBundleSync map[string]TrustBundleSyncItem

// TrustBundleSyncItem defines model for TrustBundleSyncItem.
type TrustBundleSyncItem struct {
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate Base-64 encoded Trust Bundle in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle Base-64 encoded Trust Bundle in PEM format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	Status *GetRelationshipsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// TrustDomainName relationship status from a Trust Domain perspective
	TrustDomainName *externalRef0.TrustDomainName `form:"trustDomainName,omitempty" json:"trustDomainName,omitempty"`
}

// GetRelationshipsParamsStatus defines parameters for GetRelationships.
type GetRelationshipsParamsStatus string

// PatchRelationshipsRelationshipIDJSONRequestBody defines body for PatchRelationshipsRelationshipID for application/json ContentType.
type PatchRelationshipsRelationshipIDJSONRequestBody = RelationshipApproval

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = BundlePut

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = BundleSyncBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRelationships request
	GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRelationships(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipIDWithBody(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequestWithBody(c.Server, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipsRelationshipID(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipsRelationshipIDRequest(c.Server, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TrustDomainName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trustDomainName", runtime.ParamLocationQuery, *params.TrustDomainName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipsRelationshipIDRequest calls the generic PatchRelationshipsRelationshipID builder with application/json body
func NewPatchRelationshipsRelationshipIDRequest(server string, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipsRelationshipIDRequestWithBody(server, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipsRelationshipIDRequestWithBody generates requests for PatchRelationshipsRelationshipID with any type of body
func NewPatchRelationshipsRelationshipIDRequestWithBody(server string, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relationships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationshipsRelationshipID request with any body
	PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationshipGet
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipsRelationshipIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipsRelationshipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipsRelationshipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleSyncResult
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipsRelationshipIDWithBodyWithResponse request with arbitrary body returning *PatchRelationshipsRelationshipIDResponse
func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithBodyWithResponse(ctx context.Context, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipIDWithBody(ctx, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipsRelationshipIDWithResponse(ctx context.Context, relationshipID externalRef0.UUID, body PatchRelationshipsRelationshipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipsRelationshipIDResponse, error) {
	rsp, err := c.PatchRelationshipsRelationshipID(ctx, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipsRelationshipIDResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationshipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipsRelationshipIDResponse parses an HTTP response from a PatchRelationshipsRelationshipIDWithResponse call
func ParsePatchRelationshipsRelationshipIDResponse(rsp *http.Response) (*PatchRelationshipsRelationshipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipsRelationshipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleSyncResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the relationships.
	// (GET /relationships)
	GetRelationships(ctx echo.Context, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /relationships/{relationshipID})
	PatchRelationshipsRelationshipID(ctx echo.Context, relationshipID externalRef0.UUID) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (POST /trust-domain/onboard)
	Onboard(ctx echo.Context) error
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "trustDomainName" -------------

	err = runtime.BindQueryParameter("form", true, false, "trustDomainName", ctx.QueryParams(), &params.TrustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, params)
	return err
}

// PatchRelationshipsRelationshipID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationshipsRelationshipID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationshipsRelationshipID(ctx, relationshipID)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error

	ctx.Set(Join_tokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx)
	return err
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/relationships/:relationshipID", wrapper.PatchRelationshipsRelationshipID)
	router.POST(baseURL+"/trust-domain/onboard", wrapper.Onboard)
	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x8eZPiyJLnV5Gx88euUVW6D8psbEw3EkggIQHiZW+bjtAButAt2uq7rwmyqjKzsl91",
	"v3kzNrav858UoQgPP37hHuF48NvML7KyyEHe1LPPv80qUJdFXoP7BwGEbps206Nf5A3I749uWaaJ7zZJ",
	"kcPnusinttqPQeZOT/9WgXD2efa/4O904cfbGmbLRKyqopp9+fLlwywAtV8l5URn9nl2fwGxWwX6zsLU",
	"63nsRPrb8ImJIEimkW66rYoSVE0ysRy6aQ0+zMoXTRPrAZj+h0WVuc3s8yzJG4qYfZhl7pBkbTb7TC4W",
	"H2ZZkj8+oQjyYdaMJXh0BRGoZl8+zDJQ1250pwQGNyvT6T0LecBtmyRsUwjcJfja7cP3+eqmSvLoMeEa",
	"5FETzz5jLyZ5fj9JW4Frm1QgmH3+24Pv7/P+8q1/4Z2B30w8cW0epEBIIlA3rxkLEYKkAtoFAcIwgF6g",
	"gKBQxMd9zA0o3A0BQQEM0DS9YJgw8PwFRiMhSgJ/QaOoR2Av+ffGZmLkDbdfZ9+2zZ80SJ1Eudu0FfgZ",
	"XnbfOk5ASKI8yaNf/YlQOAHwp+P5F12/fJg1VVs3v3p3rn821Jr6PgT8PjQoMjfJ/9BQ4d5VdzPwg12/",
	"i/+G7hsO3xf592GwG3OfK4Lxz1qj+QOafMxQP5BW/yhS4zZt/RPeTFA/O5P/au4+zNoycJsHhT9o5YnD",
	"d+WaDPGV3O8L+G3y3xXvj4jwvJK/fPi+kn97hZFf0dnnGcPgOMlgNEIjJKBCmgCI6wEMdQnfJynAYAuE",
	"YhaEh6IoYPyFh7s+5WE4ucARH1BE8AZ3v2Kzz7OAcQHmewwAgASux/goGuIeTuAL4BIu5hLIAgUIRREU",
	"g9EMhgKALiiPJinGJVDC/4EmPvs8Q0kipEI6XBAuhWA0RpM+AULKw4EHEIKmAEouPM8N8AAJQ4TCsYBA",
	"CQ/4YBH4gKS8+8J7q27+9fJ/HUQ4twYfKQIC+eQ8A+huX+ihWyjJoa2oQc9u7YWKZx+nP06UFR3iRdNS",
	"JIVnLfHe+pRrirKELZ7nwCFie4VjI8VwOUfEYQ1hjkuHz/V95kucf2Z1Lrpc40siL3qEY41aYgVufMo1",
	"o+55wxH2hiGLvbq3b+JGY3uZRW2RZ3tpL+8J56gNosBuuEjfc6yvcUjcBUcd8TBieMpFi90+3hQaL+mW",
	"xXOCh6u9tiP6NXunLAj83rKRvnWwRaOI+4Py6Kd6uZk+5X6Gpic5jQPZjgxEjOxU5xRJuWkccRQspdcE",
	"o9csttet6KahxdQ2aII/6OdH21OuoUUfecjA31j1wYtjsene0gyiFx48KAK7t0/HOPZvoqGxxF1Cru+X",
	"O3mBPuU+bnbeWTQ1lnnIHvWKjeqaIuqdn7ODdGbtB2XbEmzyoJ3ZfiOImGYZoy5ow1MuCezu0UPTeDzA",
	"g5G8+dhDZs1Eerm/87EVONPwsxRzjmaqiIvxhEmteyzjpzyQ04mHo8bZMj/WMmsYXHT2GTYSeYE9bU7H",
	"U3ySxUG8sSYX1RUXiSLrKPiWVTh20PinfL/X+igSE41FZH53lXeKhwuGyLGGzbKEwgk9O71fsYXCsYaw",
	"jIF58TxU4n16MFd185T3K0RVZHflMA2tejvMMzCPchRViPJlqzjLK1fx9p5eFCBNLpfiYl6kzu9Kd5Xk",
	"0lIwlk+5XR5EhTJt0XSyHR/hG+aQEFi78fcYR55cLzvylz4YHFL0UxLlPI2xczkoWNkL9Cwxs6d8l1ln",
	"v56nsTZERCg5VMqVibiXEtk+y6Y5p1CTotc3yiZWKljrPp8htNFLzorLygRhoqc8GKNdZwZ2T5JqUVYg",
	"OM/3cnO2LxwRSxYhG0c4ihtqYabXGzxnWiQQjUvc2m3rV1c3nXiQRwJfmj0XCiupd8BBo/mtFpAADjbz",
	"BmEaZuudb3vL6sjYEPhadJQ9ZtGspCx2vj5oT/klpmE20jiWlc9RpHOaoghbiw0njCx3migL7CHidnC/",
	"vy7h8UwZFr5oEPiydOeRs4/Kp7yzOJiLosnOEmf4HGuYN20p9pbhKKve4TjDXmrsSjYOMRIsWWo9LvAA",
	"91sf1+t1pndPubdbjKcj1/lYini4Sq5R3bJkvfN2qBUcVMHYodI+Qae12Uyrbm0Z/cZyGvustQ6uIk+5",
	"xrMyz09YtCXuxnJxbBbB0uw3CdN5mH7zl9q3+byv0pniQ7qowZ/ylxx5jrL83pt71gUrHgTuoLG+zB0A",
	"J7Aid8fveBVdVpaf8kXu85whcprQywL/vC6ul541NI4T2Frji+889gonxeSdR/9WdGs8mHh4sRbXuJr6",
	"8uLmHs3Ozy/9cvJ+JpJynNNL7HfNsr3yjepTzvUap4nR5BuCZW9ymsD0W5elCyGTdeyb/s9+NtzWuX7z",
	"ePLsYUg3+ZBp1qd8vddR56Jza3t/WO8n/4fubERsdIEl9QTdaSN59rP+Kz8bjnNEiRVYyVbcW09WT/lJ",
	"Wbplbg6KnZf9XF4/e7FA6EUO7g2R7RWpEHiePSIynzz0hOYXnmMVMYqk5innFIVzDSlnlz67SEd7vZBw",
	"jVfsPRcpmmoezq2ui8Pl1i0YbT2y65tID6eNxrKsNGhIXDzlXs+yHKuxO4GT2URkqQGkiW4y8gWm8NIJ",
	"8h3cbQaYP5eNqIkdszgcYhRuq4Mi8oohjE85V4GljZHCrW8vhmsa5/5AkeRpfbny+eANxsFMNiA7L1SW",
	"Q1nViDqO2qAOWidLLYyKOnnK1yxuYhcUeOLc3h6WnpUsHMtd8yzLcr6lK67esyxrCKzo9CarRLIpEv3N",
	"9XQzEJjLFX7KO2mLNwbA4gwZyPzYpkUfE4rX4+mFVyTHg/F0J5TpjmZ9k6jmx/LQiKudJR3UTOdNz3/K",
	"j2pbYabMsUubpWt+TxfoeGLnO4LZkDLj7wosvfLHZu3Ghb3ZnJZ13TVDeHmhSeZZk+aZE9mEo5TOKw51",
	"jZuE0uz7M/BSWsDHQnKPiC7EWHCI46jnh2rZKxEfXumnvPA1nmzm6DkhNXJw19mWJ5T54YgrMGteDrsx",
	"2dCK4feC4air4qTEna+zhrjmDFaIIoV7ylketG1FGHl7vmZRu6uWNp7F4dxXi+BmGfq1IJoAzLcCCgMp",
	"cFhx3TKDNEfYhh7UZOs85QlprvokHbck1c3xxMGsRdrTO8ZSEQLdr2NXWZUood129s0cQbFha5U2WEHj",
	"0+XKFtIpXthYqbcFwzhUEhWdhXt13qt6Ihr6dcx2Oye+ND3SuEFbXM/XY45QUb1PioO1F45jHZBP+VUc",
	"iIaqlUjxtQyjnCXaqSVviPGq9LERoSPzckm5k9loZyvuCP84jtqRbi0/sGhW5bZPeQuSkC/2GKkOx7Zg",
	"AhLFF1G/RTkW0Aq33w5YS6902B43x+CU9VoIW5kk90LAh/W4DOGn/FRzWL9eFjfLKdh9ZiykwkbVdeTv",
	"k+6qzjs95eLlMU4HLdCRM4OYC/1GiUqUGmewwjfMU67AviRnMMfMCSzepLwSLE5Bkweqb6r7c4L0AnLt",
	"Qce7Ibs4q+myg8+1OFcW9o3yS36Mn/K6n6eVFAx2dLVJxh2uYMUsJHOuF8QVUZTNXE3QSl1Vi/yy4xDu",
	"eixu+1xEHQ5erbtAqZ/y1jmp7dXDytWlnd9uFhXZ/dK2Th2X6JvmuCb0offhlUUfbptdgPVbFDEURlhF",
	"RBcmulA/5ctDxqE+sTonVLSJWLLd2TdXzq5wR+xzf0Xa1TxfrL0wD9c+xqhk2MBy0SS5NgoXPHGrp1xC",
	"ESe9+psMHNFWylZekMDHopLTC19oEm4JA1Nl5ULgEg5+yu8bYVEX3tkcv0wTlCB7L0ugHqzXqQkwqrEn",
	"+8kmURX7pqB6otRKbpI+r1DKpTzueXXxCYzqLTgoySZRBu2sIbrl4Bvh0itJn3iZ1Jx2986dKxORKS/S",
	"qd09SIhyLgbdEjHtrJGaoIyh8WkXpquhN9WdBlYrCTMsIuxLDaghTm03F2pU97+6gVHXPem/FOfcN69T",
	"NgSyoD7MSrdpQDUdNv7v39yPN/bjCfm4eHr6+Osv8/94evr0Xtv/ftv4f/7j397T1Cb3CrcK/qFzclNc",
	"wE8zE5MpviYzHgkKRfjZGNtWhB/OxY/Z3lJ673RsgvSeKazjpPyzebsKuA0IfnXfpLYwBEM/IuhHHLEQ",
	"5jOOfEaQ00vDTUf1j02SgTcZN/QdlSfBH5P/zenW/dUv8vo5Hxp8zZI+S/E8iVcUKXDzd8b+g5N6/4lJ",
	"vT8x6SPZ8V+p9zdoSoLZh5fWfsXCe9p7T7jftdDvavFncGXLsio6N/2TsHV9H5R/yEZv1PA88GdsyeBO",
	"PGlA9tOs0qvV9+VuFuUxjnyRf3aryh2n17uXidnvhndl6nTE3VM4p5oIHk3hFJg7vdHwRXo7HfTxdDTV",
	"k4CqzgG1vn3mT+fgqI6nA4ns5bQ57XXEOaD91hJR/SaOmmX3G8vOTse4d49qeu9jIcNGiDDd8lFNuKBq",
	"rsZeZnaehYzamcW0s/3vfyQv/TJ3+1eK6K8U0V8por9SRH+liP5KEf2VIvorRfRXiuivFNFfKaL/YSmi",
	"t1/D/4Pfob8hM510fvJV+qtalJm+XqptecqZ1SAVarZLVIHfzu222KmbNNZW6NJRzj7lbGmyAyi59TWV",
	"vl1RdW0epdux0ZBbiOz8tXdCc8eROyOLDnNZZQdyW2e7K56hl3M1IKGkCogoXPen2L0VjlLUDLF1masM",
	"+weAkDVaLQvHIfF+g+HoSb40lyVJrfIxWApY34NwNPiS/fffqQ75uwcVaNr7tDeeZ68aLy3nFrGPbTWD",
	"HcFfYPRVYckF2ktnA367b+V7m9UU+QT9Z48p0OrGll9PKcolTgNsSIOlEdmydHYxaTzxnDSdRvycG92j",
	"nk77fu/IxV5+GZZn1oceg2tNsmPD3HFL5zDEp6Vang59ZC/Vzs3250AQPY273Lli+37nY1Ljy0O6Pugj",
	"dDqa5SlLz9O+//lkc9MEbdQskdBu0W2zn0422tQ2bIRvbX10utzPNdA/crB5PtZUGn+RoedzTbKT97gn",
	"75GA5wznoFfOUb0o4r4N5P3oL9XSx+zIwBaNL0stsESgcQ9FQ3zf73cSJyliEHuydPGzNPV4zvCzxfV0",
	"0BHNrHvZeD7yceptOnd7st04uJoGcppB7kGfTnl/4ozCMzBjLWzC9eLVEEMdPsQDv+vUjdvTMawVxvmq",
	"YYskWR9O1VzAChrTrwx6MjV9W5qiWSx1+kasXK9Qq5js5tB8NKoF0/K6c7mwAsMcrtv0KMRkHJYS5/ia",
	"K/ZrzMu4eeZL8AFlT5vCKVJ6ZZLBcJxLLBQURZXC1b7XXB7b2kvCzs6Ett3B6/p24Dsak33kHFcrjbVl",
	"rDxP+294tarWrUnUWF/dIGcgDAzV4y29odRKFWORc0QbHeZtdeHbvPXZG6Kilsmtu+Zmk3VXhtiAuKuR",
	"6mEw3ihIzKzLvGe23UCkfcENo1tpS45dc0s/Ill535a2Tx9bXmcUMt0YgBAy3qTJyyAVW8kgAER3V+Kk",
	"SsvH6UT8nf2ByLGcWK6EzGRGRjU9LNvtyhwTDR7SgosnH5GDZlSYsIKdvLJThJ4rmZ31G80r+Wu7UR3E",
	"YVOWYoYLCRvNLVQYIeSxWjDEIyT36gU5m8UeywNkX63wxY29ddQCU8yuGmFkGQwogmQhI136TC5usO9n",
	"1rCbyyOJmYI5h+Y7Dw5Ztkiy4YAt66PX5gmLKV5/8XStqpD5Jt566onb4Kh4DQ7oqSexeDEcG39Hs+1a",
	"ggLOq7Pz4Sip4gHH14ImGnh4PiU707/GUbgfNCVsjFsipmizZ2TaUI9VctEot2jXjrTTIR9XiUZFYHLh",
	"80EsH5ECmH23xtfSkVEJqkUlifBDrs69wkk1McSd1YbbHLNkcJcuiP4d+t3I9bYc7/Psh6wq9jaCGLd4",
	"HKpuoDw9gOXCbN0WKbb5UNhYqAIqrWUP05X5sLLnl6O9pZL2FPZkuDDEOI3CdcAYQdTQ+Fkss5Ii0vgc",
	"EEsYNS/eMZICsw7h5ZEvDZgtrkVr1mJcjpkS9+vQJ3xW5dVkNUTora62cxTdkLcF2gVWXRatZ59cs5EG",
	"fs6jBYfNad8u/gkRRNTg40jIvjjky2Ph0GHK4JhYUBx6+teNIJdRT99GkHvbv3gEEU5KWxsmJQqYcTAh",
	"tl7FZ4Au9vae93NHSyRbCC6W5C132qpDXVkmruKRLG9JaUTXGOiVNZCFl26cE33mEQYqwuYo0BccUKeT",
	"C+9zXCZdIK7kNY752HlV93NOYlQ6NnL7QI8x02yxCqnGbSd0y3kUxFBOS8ZuXUpLLFxU++TcBhcd3lyE",
	"ZazTK7aMO43NCb/y9/Oa2g78eMqtU1cmiSddiIttBpDLY6OguH7syCLLpPF2cPCQXq5ghnPFPMPzOcd1",
	"lHYL4t25G4cyhAef3h+R4y6/CNtTDJX57ewtwOZWXzbd5nI8nkBaIDi3orYmgNvYDQ/4uV8s8jU7Fqrq",
	"DpYgMVsnVQNtP0SAgrC6Q5PQFH4aQdab0wnZRcV+P9hgdd3sEZ1SJQ6Sd+SiuZQuTK7rg7Fz0OBQML6B",
	"9EG5uIzo8nYct4dTNuzmo682uhkfTkdejiJN0StZWdeQcGrqC09e0/24Z+FVnJit6PlYo4QnQodhszXk",
	"JY3RFNLBJ8YtDuY2xVlFO6Y2QjMbXYYiB0+LOYLu9aZrPWLB2d0VRpsMtkwQW1lv2+LS6NYGI91y4eb4",
	"yTLYnXSf3oADG2vDBlqp2TowPBqjr4fWXJfYvI6T0dtQ5TnPSVg7c+Nl70mFflU5N2gjW4iXaQQfNpKf",
	"bJojBS22brMs0411aC+Lbs7wlSalKjJKCY+joJYseOvEo2WNhnANMLawtCAl66wm8cWNdJn/XATB30YQ",
	"j/C8g7I5X1oHgJsmJYc97m14ojpdDZcVU+QW+Elqz7UlCURZsIIi2yxE/dLsUph2GP/aSaotcX1aSrf4",
	"yM5Ven+Q492NJtrVLrAsiwh7ibmWSLVukXjtSEmGmES1UXWpj7C2tzejIxB1lJPKKjydjJPLBA7YWm1k",
	"DVZpjkZxtm85g3LZPyOCcD7Tnrss2272FBmvCCVq+mbV0rkh/6tGEF1g+8e3K98jyHPbv3oEcWDWsefz",
	"smq4WIeuKMayF5K2At2JAnFN7fBGn+dFXkVpgSyEdj5eK6G9svG2a3wJlZrDztts95yXKeKS6qCKjvR9",
	"zQocEWwX872peK7l6HlZ7xeLa4Ueeqo7NJu805beNu72WzXPpascnprc9LtOIKA03elNyZ5wYyOF1fGE",
	"p7LtnrFu09L50K+YMrITpr1RNDDr5TpTiN2cZ667TXg8y62UxRDN4NnBPRrGSNekHSWJvD/wfW0ARkOv",
	"83Tg96eDgx+cEWzmO9H0OAZea/1il5COdNl5AXSgthZmDnAHnEHcppU2X3k4lZ5Xt8wPmEMPkFJByMw4",
	"B2gjr0CzYPCTuSR9MV9yRh/x0NWNJNpsbj+NIBpDdIsM5ggPQ22NjkOH2JltB+WlaARkudvtY/OEojpx",
	"nKOY4+IjRcejfqavONnsWUXLzj6RHWlSIIJuU25PF008wJdjBV3n4ybFL/Qa7tvudpAShePhy9lgOFLv",
	"etYL0L4Msev5bMibar9EGC05bk4bc1gwi0NjhRDSrQ8os9FRpd92W3YudVzor24qnwKdxO0kydjz8Yqi",
	"2HV+6Xp6bZ8CHr8BEQm3OdKKC+i6oQ5xah/AJZCbPTdcC+a2dgBn+MOa0wax3gFnoeM2Xa+PJZy0DqHF",
	"ZBfG4/Jm1LBkQJo4guUO3aH7leofVlxHorSIbua3g0ZGGY/QGwrRzqdgPJyP3tnYFIaRwiJrr/ET0bPG",
	"n4wg712KeC/z9f/5nayfXqr607eo3t7belUDcaf56RG1P/lF9vP7fQTzTqbzXmPzijAeugwZUsRHkkbp",
	"jwRJYR89PPQ/Yv6CwkOKckOXejlZ296LXV5Mhb+pSkM+LtyP4S+/MV8+fnsm/sAzin15pyxtsjLw2ypp",
	"xt1khwdcYrfqQN2A6le3nXj4HcO9Hgi/GfXlw+xcJPmvf7927Q2NFyPut0iTPCy+XlB1/XtpTH633kxO",
	"mrj1Zh9mbZXOPs/ipinrzzAc3ZsnG8JL0Kegabauf3GrAI7c1A2qBKSzH26nyl9fQTtQdaCCll9FuV9Z",
	"rUvgP6CVFPmn2YdZmvggr8ELbtjS9WMAYZ+QVxx9huG+7z+597efiiqCn4fW8FrhRX0nfsQ+IZ/iJrtz",
	"1STNHTU/4ecjtClBPj3h9/k6UNUPQdBPyCcUnUgVJcjdMpkg+An5hM/uIIrv1oWrF3VD95boUXQ0eYz7",
	"CyWYmACN+arjRKJyM9CAqp59/ttvs2Sa8tqCapx9+KqI57uCH17cGQZ5m32vgAITvgOQJ/eHEuTBBMRf",
	"3kHm29qel2xDj3mgsCoyyH0u83msbqgE1WSxJukm//Aek80bX/DhD95w/vHu5y8fXt+pxhDkn3af+m1Z",
	"2DvXqnet74O6DtsU+ma8B7y/Xe1+b4ZvLMNf74C/dAR32751AX/7ZZK1brPMrcbZ59k6qRuoiQH0CkzT",
	"4mjcaILH7DV4fplmeI08+LeXHxXhy8Ru6TZ+/CMYt1PzK4rmq7E/gvO1ohQBKsIf+P0Kj2lpfEdH9Zby",
	"90jUVC34o2B5Lq395TEe1M3X27v/dHB8K2X88jpuTtx++W8C6P8sdLJ3VwMLk5upX5kcejZG/ROk3l3E",
	"x8eOAC4epdt3fBZ182PZodJAbQ1qyIWmAAbdAxjUFNDEXVElN3CH3jeuoalPDKAf/LybB1AEGihpakg9",
	"WBB7VyBkPRdkv14TzwXls/9CC7+uWX/HxCZo2iqvITeH3Aev32T3wKSTAAqL6q4HkDd3JvLouyJqqMgh",
	"D8RuGn5dny9d+ad/DlpebkPeIuVZwokrF8pB/zqU/I6dXmDnqxHeQc1vb8LMF/ixab1bqWzfCbnff3Lh",
	"J+7sFZP5I4S948l+jHP/mCv7nbj3z/dq3xXwDtaeq3ifofWoIZ/9QX/3P8Ux2WVauMEz1O7mgbxvYk1Q",
	"q98C7GUFc/2nYAbXz9UWX33We2C7V2T8S6Pt2w9rvAO55599mHyTm6ZQCIJJgyB4NloNNbHbvHYZfltV",
	"IG/SEbrkRX/fEf33ReQffo7jHZmkogJJlL8qja+hr7+B8d+yCiYG46rIkxuo31FqnzTx3/O5PyyJ+/xT",
	"pwd6X58I08J307iom09170YRqD4lBeyWCdzhs4mtZ6pvQb/5ulie9w8guC/Rl0sWDH7s5tEU9/MAqr8J",
	"9fAn39bFa3Z/PNe8mGmKlY8pHosbKr6Fp+/0voacv0vpBc+vtj8eaHowBegXs9Tfab/eCn355cv/CwAA",
	"//+FVhV4QkoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
