// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// BundlesUpdates defines model for BundlesUpdates.
type BundlesUpdates map[string]BundlesUpdatesItem

// BundlesUpdatesItem defines model for BundlesUpdatesItem.
type BundlesUpdatesItem struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// GetJwtResponse defines model for GetJwtResponse.
type GetJwtResponse struct {
	Token externalRef0.JWT `json:"token"`
}

// GetRelationshipResponse defines model for GetRelationshipResponse.
type GetRelationshipResponse = []externalRef0.Relationship

// OnboardHarvesterResponse defines model for OnboardHarvesterResponse.
type OnboardHarvesterResponse struct {
	Token           externalRef0.JWT             `json:"token"`
	TrustDomainID   externalRef0.UUID            `json:"trustDomainID"`
	TrustDomainName externalRef0.TrustDomainName `json:"trustDomainName"`
}

// PatchRelationshipRequest defines model for PatchRelationshipRequest.
type PatchRelationshipRequest struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// PostBundleSyncRequest defines model for PostBundleSyncRequest.
type PostBundleSyncRequest struct {
	State BundlesDigests `json:"state"`
}

// PostBundleSyncResponse defines model for PostBundleSyncResponse.
type PostBundleSyncResponse struct {
	State   BundlesDigests `json:"state"`
	Updates BundlesUpdates `json:"updates"`
}

// PutBundleRequest defines model for PutBundleRequest.
type PutBundleRequest struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature *externalRef0.Signature `json:"signature,omitempty"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate *externalRef0.Certificate `json:"signing_certificate,omitempty"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// PageSize TrustDomain
	PageSize *externalRef0.PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// PageNumber TrustDomain
	PageNumber *externalRef0.PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// StartDate Default value will be 30 days ago
	StartDate *externalRef0.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Default value will the current date
	EndDate *externalRef0.Date `form:"endDate,omitempty" json:"endDate,omitempty"`
}

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = PutBundleRequest

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = PostBundleSyncRequest

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationshipRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelationships request
	GetRelationships(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server, trustDomainName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, trustDomainName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelationships(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, trustDomainName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, trustDomainName, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, trustDomainName, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string, trustDomainName externalRef0.TrustDomainName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/jwt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, trustDomainName externalRef0.TrustDomainName, params *OnboardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/onboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/relationships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ConsentStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, trustDomainName, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/relationships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostBundleSyncResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetJwtResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardHarvesterResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRelationshipResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, trustDomainName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, trustDomainName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, trustDomainName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, trustDomainName, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, trustDomainName, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostBundleSyncResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetJwtResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardHarvesterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRelationshipResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/{trustDomainName}/jwt)
	GetNewJWTToken(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/{trustDomainName}/onboard)
	Onboard(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, params OnboardParams) error
	// List the relationships.
	// (GET /trust-domain/{trustDomainName}/relationships)
	GetRelationships(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /trust-domain/{trustDomainName}/relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx, trustDomainName)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, trustDomainName, params)
	return err
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, trustDomainName, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, trustDomainName, relationshipID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)
	router.GET(baseURL+"/trust-domain/:trustDomainName/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/:trustDomainName/onboard", wrapper.Onboard)
	router.GET(baseURL+"/trust-domain/:trustDomainName/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/trust-domain/:trustDomainName/relationships/:relationshipID", wrapper.PatchRelationship)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/7HpKSrhPgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
