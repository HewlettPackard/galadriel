// Package harvester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package harvester

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/HewlettPackard/galadriel/pkg/common/api"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Harvester_authScopes = "harvester_auth.Scopes"
)

// BundlesDigests defines model for BundlesDigests.
type BundlesDigests map[string]externalRef0.BundleDigest

// BundlesUpdates defines model for BundlesUpdates.
type BundlesUpdates map[string]BundlesUpdatesItem

// BundlesUpdatesItem defines model for BundlesUpdatesItem.
type BundlesUpdatesItem struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature externalRef0.Signature `json:"signature"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate externalRef0.Certificate `json:"signing_certificate"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle `json:"trust_bundle"`
}

// GetJwtResponse defines model for GetJwtResponse.
type GetJwtResponse struct {
	Token externalRef0.JWT `json:"token"`
}

// GetRelationshipResponse defines model for GetRelationshipResponse.
type GetRelationshipResponse = []externalRef0.Relationship

// OnboardHarvesterResponse defines model for OnboardHarvesterResponse.
type OnboardHarvesterResponse struct {
	Token           externalRef0.JWT             `json:"token"`
	TrustDomainID   externalRef0.UUID            `json:"trustDomainID"`
	TrustDomainName externalRef0.TrustDomainName `json:"trustDomainName"`
}

// PatchRelationshipRequest defines model for PatchRelationshipRequest.
type PatchRelationshipRequest struct {
	ConsentStatus externalRef0.ConsentStatus `json:"consent_status"`
}

// PostBundleSyncRequest defines model for PostBundleSyncRequest.
type PostBundleSyncRequest struct {
	State BundlesDigests `json:"state"`
}

// PostBundleSyncResponse defines model for PostBundleSyncResponse.
type PostBundleSyncResponse struct {
	State   BundlesDigests `json:"state"`
	Updates BundlesUpdates `json:"updates"`
}

// PutBundleRequest defines model for PutBundleRequest.
type PutBundleRequest struct {
	// Digest base64 encoded SHA-256 digest of the bundle
	Digest externalRef0.BundleDigest `json:"digest"`

	// Signature base64 encoded signature of the bundle
	Signature *externalRef0.Signature `json:"signature,omitempty"`

	// SigningCertificate X.509 certificate in PEM format
	SigningCertificate *externalRef0.Certificate `json:"signing_certificate,omitempty"`

	// TrustBundle SPIFFE Trust bundle in JSON format
	TrustBundle externalRef0.TrustBundle     `json:"trust_bundle"`
	TrustDomain externalRef0.TrustDomainName `json:"trust_domain"`
}

// Default defines model for Default.
type Default = externalRef0.ApiError

// OnboardParams defines parameters for Onboard.
type OnboardParams struct {
	// JoinToken Join token to be used for onboarding
	JoinToken string `form:"joinToken" json:"joinToken"`
}

// GetRelationshipsParams defines parameters for GetRelationships.
type GetRelationshipsParams struct {
	ConsentStatus *externalRef0.ConsentStatus `form:"consentStatus,omitempty" json:"consentStatus,omitempty"`

	// PageSize TrustDomain
	PageSize *externalRef0.PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// PageNumber TrustDomain
	PageNumber *externalRef0.PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`
}

// BundlePutJSONRequestBody defines body for BundlePut for application/json ContentType.
type BundlePutJSONRequestBody = PutBundleRequest

// BundleSyncJSONRequestBody defines body for BundleSync for application/json ContentType.
type BundleSyncJSONRequestBody = PostBundleSyncRequest

// PatchRelationshipJSONRequestBody defines body for PatchRelationship for application/json ContentType.
type PatchRelationshipJSONRequestBody = PatchRelationshipRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BundlePut request with any body
	BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleSync request with any body
	BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewJWTToken request
	GetNewJWTToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Onboard request
	Onboard(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelationships request
	GetRelationships(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRelationship(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BundlePutWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlePut(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlePutRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSyncWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequestWithBody(c.Server, trustDomainName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleSync(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleSyncRequest(c.Server, trustDomainName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewJWTToken(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewJWTTokenRequest(c.Server, trustDomainName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Onboard(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnboardRequest(c.Server, trustDomainName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelationships(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationshipsRequest(c.Server, trustDomainName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationshipWithBody(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequestWithBody(c.Server, trustDomainName, relationshipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRelationship(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRelationshipRequest(c.Server, trustDomainName, relationshipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBundlePutRequest calls the generic BundlePut builder with application/json body
func NewBundlePutRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlePutRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundlePutRequestWithBody generates requests for BundlePut with any type of body
func NewBundlePutRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleSyncRequest calls the generic BundleSync builder with application/json body
func NewBundleSyncRequest(server string, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleSyncRequestWithBody(server, trustDomainName, "application/json", bodyReader)
}

// NewBundleSyncRequestWithBody generates requests for BundleSync with any type of body
func NewBundleSyncRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/bundles/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewJWTTokenRequest generates requests for GetNewJWTToken
func NewGetNewJWTTokenRequest(server string, trustDomainName externalRef0.TrustDomainName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/jwt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnboardRequest generates requests for Onboard
func NewOnboardRequest(server string, trustDomainName externalRef0.TrustDomainName, params *OnboardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/onboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "joinToken", runtime.ParamLocationQuery, params.JoinToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRelationshipsRequest generates requests for GetRelationships
func NewGetRelationshipsRequest(server string, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/relationships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConsentStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consentStatus", runtime.ParamLocationQuery, *params.ConsentStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRelationshipRequest calls the generic PatchRelationship builder with application/json body
func NewPatchRelationshipRequest(server string, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRelationshipRequestWithBody(server, trustDomainName, relationshipID, "application/json", bodyReader)
}

// NewPatchRelationshipRequestWithBody generates requests for PatchRelationship with any type of body
func NewPatchRelationshipRequestWithBody(server string, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, trustDomainName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, relationshipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trust-domain/%s/relationships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BundlePut request with any body
	BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error)

	// BundleSync request with any body
	BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error)

	// GetNewJWTToken request
	GetNewJWTTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error)

	// Onboard request
	OnboardWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error)

	// GetRelationships request
	GetRelationshipsWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error)

	// PatchRelationship request with any body
	PatchRelationshipWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)

	PatchRelationshipWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error)
}

type BundlePutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundlePutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlePutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostBundleSyncResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r BundleSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewJWTTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetJwtResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetNewJWTTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewJWTTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnboardHarvesterResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r OnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelationshipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRelationshipResponse
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r GetRelationshipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationshipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Relationship
	JSONDefault  *externalRef0.ApiError
}

// Status returns HTTPResponse.Status
func (r PatchRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BundlePutWithBodyWithResponse request with arbitrary body returning *BundlePutResponse
func (c *ClientWithResponses) BundlePutWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePutWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

func (c *ClientWithResponses) BundlePutWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundlePutJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlePutResponse, error) {
	rsp, err := c.BundlePut(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlePutResponse(rsp)
}

// BundleSyncWithBodyWithResponse request with arbitrary body returning *BundleSyncResponse
func (c *ClientWithResponses) BundleSyncWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSyncWithBody(ctx, trustDomainName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

func (c *ClientWithResponses) BundleSyncWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, body BundleSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleSyncResponse, error) {
	rsp, err := c.BundleSync(ctx, trustDomainName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleSyncResponse(rsp)
}

// GetNewJWTTokenWithResponse request returning *GetNewJWTTokenResponse
func (c *ClientWithResponses) GetNewJWTTokenWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, reqEditors ...RequestEditorFn) (*GetNewJWTTokenResponse, error) {
	rsp, err := c.GetNewJWTToken(ctx, trustDomainName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewJWTTokenResponse(rsp)
}

// OnboardWithResponse request returning *OnboardResponse
func (c *ClientWithResponses) OnboardWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *OnboardParams, reqEditors ...RequestEditorFn) (*OnboardResponse, error) {
	rsp, err := c.Onboard(ctx, trustDomainName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnboardResponse(rsp)
}

// GetRelationshipsWithResponse request returning *GetRelationshipsResponse
func (c *ClientWithResponses) GetRelationshipsWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, params *GetRelationshipsParams, reqEditors ...RequestEditorFn) (*GetRelationshipsResponse, error) {
	rsp, err := c.GetRelationships(ctx, trustDomainName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationshipsResponse(rsp)
}

// PatchRelationshipWithBodyWithResponse request with arbitrary body returning *PatchRelationshipResponse
func (c *ClientWithResponses) PatchRelationshipWithBodyWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationshipWithBody(ctx, trustDomainName, relationshipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

func (c *ClientWithResponses) PatchRelationshipWithResponse(ctx context.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID, body PatchRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRelationshipResponse, error) {
	rsp, err := c.PatchRelationship(ctx, trustDomainName, relationshipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRelationshipResponse(rsp)
}

// ParseBundlePutResponse parses an HTTP response from a BundlePutWithResponse call
func ParseBundlePutResponse(rsp *http.Response) (*BundlePutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlePutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBundleSyncResponse parses an HTTP response from a BundleSyncWithResponse call
func ParseBundleSyncResponse(rsp *http.Response) (*BundleSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostBundleSyncResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNewJWTTokenResponse parses an HTTP response from a GetNewJWTTokenWithResponse call
func ParseGetNewJWTTokenResponse(rsp *http.Response) (*GetNewJWTTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewJWTTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetJwtResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnboardResponse parses an HTTP response from a OnboardWithResponse call
func ParseOnboardResponse(rsp *http.Response) (*OnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnboardHarvesterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRelationshipsResponse parses an HTTP response from a GetRelationshipsWithResponse call
func ParseGetRelationshipsResponse(rsp *http.Response) (*GetRelationshipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationshipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRelationshipResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchRelationshipResponse parses an HTTP response from a PatchRelationshipWithResponse call
func ParsePatchRelationshipResponse(rsp *http.Response) (*PatchRelationshipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Relationship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a new trust bundle to the server
	// (PUT /trust-domain/{trustDomainName}/bundles)
	BundlePut(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Synchronizes federated bundles with Galadriel Server
	// (POST /trust-domain/{trustDomainName}/bundles/sync)
	BundleSync(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Get a renewed JWT token with the same claims as the original one
	// (GET /trust-domain/{trustDomainName}/jwt)
	GetNewJWTToken(ctx echo.Context, trustDomainName externalRef0.TrustDomainName) error
	// Onboarding a new Trust Domain in the Galadriel Server
	// (GET /trust-domain/{trustDomainName}/onboard)
	Onboard(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, params OnboardParams) error
	// List the relationships.
	// (GET /trust-domain/{trustDomainName}/relationships)
	GetRelationships(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, params GetRelationshipsParams) error
	// Accept/Denies relationship requests
	// (PATCH /trust-domain/{trustDomainName}/relationships/{relationshipID})
	PatchRelationship(ctx echo.Context, trustDomainName externalRef0.TrustDomainName, relationshipID externalRef0.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// BundlePut converts echo context to params.
func (w *ServerInterfaceWrapper) BundlePut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundlePut(ctx, trustDomainName)
	return err
}

// BundleSync converts echo context to params.
func (w *ServerInterfaceWrapper) BundleSync(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BundleSync(ctx, trustDomainName)
	return err
}

// GetNewJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewJWTToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNewJWTToken(ctx, trustDomainName)
	return err
}

// Onboard converts echo context to params.
func (w *ServerInterfaceWrapper) Onboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params OnboardParams
	// ------------- Required query parameter "joinToken" -------------

	err = runtime.BindQueryParameter("form", true, true, "joinToken", ctx.QueryParams(), &params.JoinToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter joinToken: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Onboard(ctx, trustDomainName, params)
	return err
}

// GetRelationships converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelationships(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipsParams
	// ------------- Optional query parameter "consentStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "consentStatus", ctx.QueryParams(), &params.ConsentStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consentStatus: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "pageNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageNumber", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelationships(ctx, trustDomainName, params)
	return err
}

// PatchRelationship converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRelationship(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "trustDomainName" -------------
	var trustDomainName externalRef0.TrustDomainName

	err = runtime.BindStyledParameterWithLocation("simple", false, "trustDomainName", runtime.ParamLocationPath, ctx.Param("trustDomainName"), &trustDomainName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trustDomainName: %s", err))
	}

	// ------------- Path parameter "relationshipID" -------------
	var relationshipID externalRef0.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "relationshipID", runtime.ParamLocationPath, ctx.Param("relationshipID"), &relationshipID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relationshipID: %s", err))
	}

	ctx.Set(Harvester_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRelationship(ctx, trustDomainName, relationshipID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/trust-domain/:trustDomainName/bundles", wrapper.BundlePut)
	router.POST(baseURL+"/trust-domain/:trustDomainName/bundles/sync", wrapper.BundleSync)
	router.GET(baseURL+"/trust-domain/:trustDomainName/jwt", wrapper.GetNewJWTToken)
	router.GET(baseURL+"/trust-domain/:trustDomainName/onboard", wrapper.Onboard)
	router.GET(baseURL+"/trust-domain/:trustDomainName/relationships", wrapper.GetRelationships)
	router.PATCH(baseURL+"/trust-domain/:trustDomainName/relationships/:relationshipID", wrapper.PatchRelationship)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../common/api/schemas.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
