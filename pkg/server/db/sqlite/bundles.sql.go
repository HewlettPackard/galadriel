// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: bundles.sql

package sqlite

import (
	"context"
)

const createBundle = `-- name: CreateBundle :one
INSERT INTO bundles(id, data, digest, signature, signing_certificate, trust_domain_id)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, trust_domain_id, data, digest, signature, signing_certificate, created_at, updated_at
`

type CreateBundleParams struct {
	ID                 string
	Data               []byte
	Digest             []byte
	Signature          []byte
	SigningCertificate []byte
	TrustDomainID      string
}

func (q *Queries) CreateBundle(ctx context.Context, arg CreateBundleParams) (Bundle, error) {
	row := q.queryRow(ctx, q.createBundleStmt, createBundle,
		arg.ID,
		arg.Data,
		arg.Digest,
		arg.Signature,
		arg.SigningCertificate,
		arg.TrustDomainID,
	)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.TrustDomainID,
		&i.Data,
		&i.Digest,
		&i.Signature,
		&i.SigningCertificate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBundle = `-- name: DeleteBundle :exec
DELETE
FROM bundles
WHERE id = ?
`

func (q *Queries) DeleteBundle(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteBundleStmt, deleteBundle, id)
	return err
}

const findBundleByID = `-- name: FindBundleByID :one
SELECT id, trust_domain_id, data, digest, signature, signing_certificate, created_at, updated_at
FROM bundles
WHERE id = ?
`

func (q *Queries) FindBundleByID(ctx context.Context, id string) (Bundle, error) {
	row := q.queryRow(ctx, q.findBundleByIDStmt, findBundleByID, id)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.TrustDomainID,
		&i.Data,
		&i.Digest,
		&i.Signature,
		&i.SigningCertificate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findBundleByTrustDomainID = `-- name: FindBundleByTrustDomainID :one
SELECT id, trust_domain_id, data, digest, signature, signing_certificate, created_at, updated_at
FROM bundles
WHERE trust_domain_id = ?
LIMIT 1
`

func (q *Queries) FindBundleByTrustDomainID(ctx context.Context, trustDomainID string) (Bundle, error) {
	row := q.queryRow(ctx, q.findBundleByTrustDomainIDStmt, findBundleByTrustDomainID, trustDomainID)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.TrustDomainID,
		&i.Data,
		&i.Digest,
		&i.Signature,
		&i.SigningCertificate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBundles = `-- name: ListBundles :many
SELECT id, trust_domain_id, data, digest, signature, signing_certificate, created_at, updated_at
FROM bundles
ORDER BY created_at DESC
`

func (q *Queries) ListBundles(ctx context.Context) ([]Bundle, error) {
	rows, err := q.query(ctx, q.listBundlesStmt, listBundles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bundle
	for rows.Next() {
		var i Bundle
		if err := rows.Scan(
			&i.ID,
			&i.TrustDomainID,
			&i.Data,
			&i.Digest,
			&i.Signature,
			&i.SigningCertificate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBundle = `-- name: UpdateBundle :one
UPDATE bundles
SET data                = ?,
    digest              = ?,
    signature           = ?,
    signing_certificate = ?,
    updated_at          = datetime('now')
WHERE id = ?
RETURNING id, trust_domain_id, data, digest, signature, signing_certificate, created_at, updated_at
`

type UpdateBundleParams struct {
	Data               []byte
	Digest             []byte
	Signature          []byte
	SigningCertificate []byte
	ID                 string
}

func (q *Queries) UpdateBundle(ctx context.Context, arg UpdateBundleParams) (Bundle, error) {
	row := q.queryRow(ctx, q.updateBundleStmt, updateBundle,
		arg.Data,
		arg.Digest,
		arg.Signature,
		arg.SigningCertificate,
		arg.ID,
	)
	var i Bundle
	err := row.Scan(
		&i.ID,
		&i.TrustDomainID,
		&i.Data,
		&i.Digest,
		&i.Signature,
		&i.SigningCertificate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
