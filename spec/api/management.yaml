openapi: 3.0.0
info:
  title: SPIRE Bridge - Galadriel Server API
  description: Set of APIs to be used by Galadriel administrations to define and configure the bridge, members, and relationships
  version: 1.0.0

servers:
  - url: http://localhost:32208/

components:
  schemas:
    # The goal of SPIRE Bridge - Galadriel is to store and move trust bundles around 
    # There is no way to update trust bundles, they are only created or deleted
    # Deletion is normally automatic (not through API) when the trust bundle contents
    # indicate that it has expired

#    Organization:
#      # An organization is the building block to create Federation Groups. It provides multitenancy capabilities.
#      type: object
#      properties:
#        id:
#          type: integer
#          format: int64
#        name:
#          type: string
#          format: string
#      required:
#        - id
#        - name
    FederationGroup:
      # A Federation Group represents a bridge for its Members,
      # allowing relationships to be established
      type: object
      properties:
        id:
          type: integer
          format: int64
#        orgid:
#          type: integer
#          format: int64
        name:
          type: string
          format: string
        status:
          type: string
          format: string
          enum:
            - inactive
            - active
      required:
        - id
#        - orgid
        - name
    Member:
      # Member is a representation of a trust-domain/Member
      type: object
      properties:
        id:
          type: integer
          format: int64
        trustDomain:
          type: string
          format: string
        description:
          type: string
          format: string
        status:
          type: string
          enum:
            - invited
            - active
            - inactive
      required:
        - id
        - trustdomain
        - description
        - status
    Membership:
      # A Membership reperesents a particular SPIRE server's presence in a
      # FederationGroup
      type: object
      properties:
        id:
          type: integer
          format: int64
        spireServerId:
          type: integer
          format: int64
        federationGroupId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - active
            - inactive
      required:
        - spireServerId
        - federationGroupId
        - status
    
paths:
#  /organizations:
#    post:
#      description: Create a new organization
#      operationId: createOrganization
#      requestBody:
#        description: Elements of the organization to add
#        required: true
#        content:
#          application/jason:
#            schema:
#              $ref: '#/components/schemas/Organization'
#      responses:
#        '201':
#          description: Organization creation response
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Organization'
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: './schemas.yaml'
#    get:
#      description: Returns all Organizations
#      operationId: getOrganizations
#      parameters:
#        - name: name
#          in: query
#          description: filter organizations by name
#          schema:
#            type: string
#            format: string
#      responses:
#        '200':
#          description: get organization's response
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Organization'
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: './schemas.yaml'
#  /organizations/{orgID}:
#    get:
#      description: get data for one organization
#      operationId: getOrgbyID
#      parameters:
#        - name: orgID
#          in: path
#          description: Id of the organization to be retrieved
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '200':
#          description: get organization's response
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Organization'
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: './schemas.yaml'
#    patch:
#      description: update an organizaion by ID
#      operationId: updateOrganizaion
#      parameters:
#        - name: orgID
#          in: path
#          description: Id of the organization to update
#          required: true
#          schema:
#            type: integer
#            format: int64
#      requestBody:
#        description: contents of the org to be updated
#        content:
#          application/x-www-form-urlencoded:
#            schema:
#              $ref: '#/components/schemas/Organization'
#      responses:
#        '204':
#          description: no content
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: './schemas.yaml'
#    delete:
#      description: delete an organization
#      operationId: deleteOrganization
#      parameters:
#        - name: orgID
#          in: path
#          description: Id of the organization to delete
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '204':
#          description: no content
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: './schemas.yaml'
  /federationGroups:
    post:
      description: Create a new Federation group . It represents a bridge for its Members, allowing relationships to be created.
      operationId: createFederationGroup
      requestBody:
        description: Elements of the Federation group  to add
        required: true 
        content:
          application/jason:
            schema:
              $ref: '#/components/schemas/FederationGroup'
      responses:
        '201': 
          description: Federation Group creation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FederationGroup'
        default:
          description: unexpected error 
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
    get:
      description: Returns all federation groups
      operationId: getFederationGroups
      parameters:
        - name: orgId
          in: query
          description: filter federation groups by orgId
          schema:
            type: string
            format: int64
        - name: orgname
          in: query
          description: filter federation groups by orgname
          schema:
            type: string
            format: string
        - name: name
          in: query
          description: filter organizations by Federation group  name
          schema:
            type: string
            format: string
      responses:
        '200':
          description: get FederationGroup's response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FederationGroup'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
  /federationGroups/{federationGroupID}:
    get: 
      description: get data for one FederationGroup
      operationId: getFederationGroupByID
      parameters:
        - name: federationGroupID
          in: path
          description: Id of the federationGroup to be retrieved
          required: true 
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: get federationGroup ID's response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FederationGroup'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'  
    patch:
      description: update a federationGroup by ID
      operationId: updateFederationGroup
      parameters:
        - name: federationGroupID
          in: path
          description: Id of the federationGroup to update
          required: true
          schema: 
            type: integer
            format: int64
      requestBody:
        description: contents of the federationGroup to be updated
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FederationGroup'
      responses:
        '204':
          description: no content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
    delete:
      description: delete a federationGroup
      operationId: deleteFederationGroup
      parameters:
        - name: federationGroupID
          in: path
          description: Id of the federationGroup to delete
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '204':
          description: no content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'

  /members:
    post:
      description: Create a new Member
      operationId: createMember
      requestBody:
        description: Elements of SPIRE server to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '201': 
          description: Member creation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        default:
          description: unexpected error 
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
    get:
      description: Returns all the Members
      operationId: getMembers
      parameters:
        - name: trustDomain
          in: query
          description: filter Members by trust domain
          schema:
            type: string
            format: string
        - name: status
          in: query
          description: filter Members by status
          schema:
            type: string
            enum:
              - invited
              - inactive
              - active
      responses:
        '200':
          description: get Member response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        default:
          description: unexpected Error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
  /members/{memberId}:
    patch:
      description: Updates the status of a Member
      operationId: updateMember
      parameters:
        - name: spireServerId
          in: path 
          description: Id of the SPIRE server to update 
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: contents of the SPIRE server to update
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '200':
          description: get Members's response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
    delete:
      description: delete a Member
      operationId: deleteMember
      parameters:
        - name: spireServerId
          in: path
          description: Id of the SPIRE server to delete
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '204':
          description: no content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
  /memberships:
    post:
      description: Associate a Member to a Federation Group
      operationId: createMembership
      requestBody:
        description: Elements of the Memberships to add
        required: true 
        content:
          application/jason:
            schema:
              $ref: '#/components/schemas/Membership'
      responses:
        '201': 
          description: Membership creation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        default:
          description: unexpected error 
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
    get:
      description: Returns all memberships
      operationId: getMemberships
      parameters:
        - name: orgId
          in: query
          description: filter Memberships by orgId
          schema:
            type: string
            format: int64
        - name: orgname
          in: query
          description: filter memberships by orgname
          schema:
            type: string
            format: string
        - name: trustDomain
          in: query
          description: filter memberships by trust domain (SpireSever)
          schema:
            type: string
            format: string
        - name: status
          in: query
          description: filter memberships by status
          schema:
            type: string
            enum:
              - inactive
              - active
      responses:
        '200':
          description: get Membership response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Membership'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
  /memberships/{membershipID}:
    get: 
      description: get data for one Membership
      operationId: getMembershipByID
      parameters:
        - name: membershipID
          in: path
          description: Id of the Membership to be retrieved
          required: true 
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: get Membership response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'  
    patch:
      description: update a Membership by ID
      operationId: updateMembership
      parameters:
        - name: membershipID
          in: path
          description: Id of the Membership to update
          required: true
          schema: 
            type: integer
            format: int64
      requestBody:
        description: contents of the Membership to be updated
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Membership'
      responses:
        '204':
          description: no content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
    delete:
      description: delete a Membership
      operationId: deleteMembership
      parameters:
        - name: membershipID
          in: path
          description: Id of the Membership to delete
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '204':
          description: no content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
  /relationships:
    post:
      description: Creates initial request for trust bundle exchange between two Members active in the same Federation group
      operationId: createRelationship
      requestBody:
        description: Elements of the Relationship to add
        required: true 
        content:
          application/jason:
            schema:
              $ref: './schemas.yaml'
      responses:
        '201': 
          description: Relationship creation response
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
        default:
          description: unexpected error 
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
    get:
      # TODO: review
      description: Returns all Relationships
      operationId: getRelationships
      parameters:
        - name: orgId
          in: query
          description: filter Relationships by orgId
          schema:
            type: string
            format: int64
        - name: orgname
          in: query
          description: filter memberships by orgname
          schema:
            type: string
            format: string
        - name: trustDomain
          in: query
          description: filter memberships by trust domain (SpireSever)
          schema:
            type: string
            format: string
        - name: status
          in: query
          description: filter memberships by status
          schema:
            type: string
            enum:
              - inactive
              - active
              - invited
      responses:
        '200':
          description: get Relationship response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas.yaml'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
  /relationships/{relationshipID}:
    get: 
      description: get data for one Relationship
      operationId: getRelationshipByID
      parameters:
        - name: relationshipID
          in: path
          description: Id of the Relationship to be retrieved
          required: true 
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: get Relationship response
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'  
    patch:
      description: update a Relationship by ID
      operationId: updateRelationship
      parameters:
        - name: relationshipID
          in: path
          description: Id of the Relationship to update
          required: true
          schema: 
            type: integer
            format: int64
      requestBody:
        description: contents of the Relationship to be updated
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: './schemas.yaml'
      responses:
        '204':
          description: no content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: './schemas.yaml'
# TODO: review
  /trustBundles/{trustBundleId}:
    patch:
      description: Upload a TrustBundle
      operationId: updateTrustBundle
      parameters:
        - name: trustBundleId
          in: path 
          description: Id of the trust bundle to update 
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: contents of the trust bundle to update
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: './schemas.yaml'
      responses:
          '200':
            description: get trust bundle's response 
            content:
              application/json:
                schema:
                  $ref: './schemas.yaml'
          default:
            description: unexpected error
            content:
              application/json:
                schema:
                  $ref: './schemas.yaml'

