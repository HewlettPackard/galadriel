package entity

import (
	"time"

	"github.com/google/uuid"
	"github.com/spiffe/go-spiffe/v2/spiffeid"
)

// TODO: these entities will be defined by the OpenAPI specs and autogenerated.

type Status string

const (
	StatusPending  Status = "pending"
	StatusActive   Status = "active"
	StatusDisabled Status = "disabled"
	StatusDenied   Status = "denied"
)

type FederationGroup struct {
	ID          uuid.NullUUID
	Name        string
	Description string
	Status      Status
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type Member struct {
	ID          uuid.NullUUID
	TrustDomain spiffeid.TrustDomain `json:"trust_domain"`
	Status      Status
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type Membership struct {
	ID                uuid.NullUUID
	MemberID          uuid.UUID `json:"member_id"`
	FederationGroupID uuid.UUID `json:"federation_group_id"`
	Status            Status
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

type JoinToken struct {
	ID        uuid.NullUUID
	Token     string
	Expiry    time.Time
	Used      bool
	MemberID  uuid.UUID `json:"member_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Bundle represents a SPIFFE Trust bundle along with its digest.
type Bundle struct {
	ID           uuid.NullUUID
	RawBundle    []byte        `json:"raw_bundle"`
	Digest       []byte        `json:"bundle_digest"`
	SignedBundle []byte        `json:"signed_bundle"`
	TlogID       uuid.NullUUID `json:"tlog_id"`
	SvidPem      string        `json:"svid_pem"`
	MemberID     uuid.UUID     `json:"member_id"`
	CreatedAt    time.Time     `json:"created_at"`
	UpdatedAt    time.Time     `json:"updated_at"`
}

type Harvester struct {
	ID          uuid.NullUUID
	MemberID    uuid.UUID `json:"member_id"`
	IsLeader    bool      `json:"is_leader"`
	LeaderUntil time.Time `json:"leader_until"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (s Status) String() string {
	switch s {
	case StatusPending:
		return "pending"
	case StatusActive:
		return "active"
	case StatusDenied:
		return "denied"
	case StatusDisabled:
		return "disabled"
	}
	return ""
}
